Document {
	Chapter Overview : Presentation of the uml MetaModel {
		Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
		sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
		Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
		@label "uml" "uml definition"
		nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
		reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
		@see "uml" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
		sunt in culpa qui officia deserunt mollit anim id est laborum.

		Section The uml MetaModel Storage {
			We define in this section the storage options of our MetaModel.
			@M umlStorageDefinition 
				Resource umlResource {
					URI = "platform:/resource/rmTest/generated/uml.ecore";
					contentType = "ECore";
					content += uml;
				}
			M@

			We then define the stored EPackage, which will be the root of our metamodel :
			@M umlPackage_definition 
				new EPackage uml {
					nsURI = "http://www.eclipse.org/uml2/3.0.0/UML";
					nsPrefix = "uml";
				}
			M@
		}

		Section Presentation of the Comment class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Comment" "Comment definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Comment" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CommentDefinition 
				uml {
					eClassifiers += new EClass Comment {
						eStructuralFeatures += new EAttribute {
							name = "body";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "annotatedElement";
							eType = Element;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the Element class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Element" "Element definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Element" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ElementDefinition 
				uml {
					eClassifiers += new EClass Element {
						eStructuralFeatures += new EReference {
							name = "ownedElement";
							eType = Element;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "owner";
							eType = Element;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedComment";
							eType = Comment;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += EModelElement;
					};
				}
			M@
		}

		Section Presentation of the Package class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Package" "Package definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Package" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PackageDefinition 
				uml {
					eClassifiers += new EClass Package {
						eStructuralFeatures += new EReference {
							name = "ownedType";
							eType = Type;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "packageMerge";
							eType = PackageMerge;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "packagedElement";
							eType = PackageableElement;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "nestedPackage";
							eType = Package;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "nestingPackage";
							eType = Package;
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "profileApplication";
							eType = ProfileApplication;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Namespace;
						eSuperTypes += PackageableElement;
						eSuperTypes += TemplateableElement;
					};
				}
			M@
		}

		Section Presentation of the PackageableElement class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "PackageableElement" "PackageableElement definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "PackageableElement" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PackageableElementDefinition 
				uml {
					eClassifiers += new EClass PackageableElement {};
				}
			M@
		}

		Section Presentation of the NamedElement class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "NamedElement" "NamedElement definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "NamedElement" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M NamedElementDefinition 
				uml {
					eClassifiers += new EClass NamedElement {
						eStructuralFeatures += new EAttribute {
							name = "name";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "visibility";
							eType = VisibilityKind;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "qualifiedName";
							eType = String;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "clientDependency";
							eType = Dependency;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "namespace";
							eType = Namespace;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "nameExpression";
							eType = StringExpression;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the Dependency class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Dependency" "Dependency definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Dependency" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DependencyDefinition 
				uml {
					eClassifiers += new EClass Dependency {
						eStructuralFeatures += new EReference {
							name = "supplier";
							eType = NamedElement;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "client";
							eType = NamedElement;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += PackageableElement;
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the DirectedRelationship class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DirectedRelationship" "DirectedRelationship definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DirectedRelationship" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DirectedRelationshipDefinition 
				uml {
					eClassifiers += new EClass DirectedRelationship {
						eStructuralFeatures += new EReference {
							name = "source";
							eType = Element;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "target";
							eType = Element;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += Relationship;
					};
				}
			M@
		}

		Section Presentation of the Relationship class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Relationship" "Relationship definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Relationship" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M RelationshipDefinition 
				uml {
					eClassifiers += new EClass Relationship {
						eStructuralFeatures += new EReference {
							name = "relatedElement";
							eType = Element;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the Namespace class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Namespace" "Namespace definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Namespace" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M NamespaceDefinition 
				uml {
					eClassifiers += new EClass Namespace {
						eStructuralFeatures += new EReference {
							name = "elementImport";
							eType = ElementImport;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "packageImport";
							eType = PackageImport;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedRule";
							eType = Constraint;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "member";
							eType = NamedElement;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "importedMember";
							eType = PackageableElement;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedMember";
							eType = NamedElement;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the ElementImport class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ElementImport" "ElementImport definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ElementImport" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ElementImportDefinition 
				uml {
					eClassifiers += new EClass ElementImport {
						eStructuralFeatures += new EAttribute {
							name = "visibility";
							eType = VisibilityKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "public";
						};
						eStructuralFeatures += new EAttribute {
							name = "alias";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "importedElement";
							eType = PackageableElement;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "importingNamespace";
							eType = Namespace;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the PackageImport class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "PackageImport" "PackageImport definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "PackageImport" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PackageImportDefinition 
				uml {
					eClassifiers += new EClass PackageImport {
						eStructuralFeatures += new EAttribute {
							name = "visibility";
							eType = VisibilityKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "public";
						};
						eStructuralFeatures += new EReference {
							name = "importedPackage";
							eType = Package;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "importingNamespace";
							eType = Namespace;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the Constraint class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Constraint" "Constraint definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Constraint" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ConstraintDefinition 
				uml {
					eClassifiers += new EClass Constraint {
						eStructuralFeatures += new EReference {
							name = "constrainedElement";
							eType = Element;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "specification";
							eType = ValueSpecification;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "context";
							eType = Namespace;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += PackageableElement;
					};
				}
			M@
		}

		Section Presentation of the ValueSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ValueSpecification" "ValueSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ValueSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ValueSpecificationDefinition 
				uml {
					eClassifiers += new EClass ValueSpecification {};
				}
			M@
		}

		Section Presentation of the TypedElement class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TypedElement" "TypedElement definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TypedElement" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TypedElementDefinition 
				uml {
					eClassifiers += new EClass TypedElement {
						eStructuralFeatures += new EReference {
							name = "type";
							eType = Type;
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the Type class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Type" "Type definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Type" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TypeDefinition 
				uml {
					eClassifiers += new EClass Type {
						eStructuralFeatures += new EReference {
							name = "package";
							eType = Package;
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += PackageableElement;
					};
				}
			M@
		}

		Section Presentation of the Association class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Association" "Association definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Association" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M AssociationDefinition 
				uml {
					eClassifiers += new EClass Association {
						eStructuralFeatures += new EReference {
							name = "ownedEnd";
							eType = Property;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "memberEnd";
							eType = Property;
							lowerBound = "2";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isDerived";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "endType";
							eType = Type;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							ordered = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "navigableOwnedEnd";
							eType = Property;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Classifier;
						eSuperTypes += Relationship;
					};
				}
			M@
		}

		Section Presentation of the Classifier class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Classifier" "Classifier definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Classifier" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ClassifierDefinition 
				uml {
					eClassifiers += new EClass Classifier {
						eStructuralFeatures += new EAttribute {
							name = "isAbstract";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "generalization";
							eType = Generalization;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "powertypeExtent";
							eType = GeneralizationSet;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "feature";
							eType = Feature;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inheritedMember";
							eType = NamedElement;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedClassifier";
							eType = Classifier;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "general";
							eType = Classifier;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "substitution";
							eType = Substitution;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "attribute";
							eType = Property;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "representation";
							eType = CollaborationUse;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "collaborationUse";
							eType = CollaborationUse;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedUseCase";
							eType = UseCase;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "useCase";
							eType = UseCase;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Namespace;
						eSuperTypes += RedefinableElement;
						eSuperTypes += Type;
						eSuperTypes += TemplateableElement;
					};
				}
			M@
		}

		Section Presentation of the RedefinableElement class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "RedefinableElement" "RedefinableElement definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "RedefinableElement" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M RedefinableElementDefinition 
				uml {
					eClassifiers += new EClass RedefinableElement {
						eStructuralFeatures += new EAttribute {
							name = "isLeaf";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedElement";
							eType = RedefinableElement;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinitionContext";
							eType = Classifier;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the TemplateableElement class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TemplateableElement" "TemplateableElement definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TemplateableElement" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TemplateableElementDefinition 
				uml {
					eClassifiers += new EClass TemplateableElement {
						eStructuralFeatures += new EReference {
							name = "templateBinding";
							eType = TemplateBinding;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedTemplateSignature";
							eType = TemplateSignature;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the TemplateBinding class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TemplateBinding" "TemplateBinding definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TemplateBinding" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TemplateBindingDefinition 
				uml {
					eClassifiers += new EClass TemplateBinding {
						eStructuralFeatures += new EReference {
							name = "signature";
							eType = TemplateSignature;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "parameterSubstitution";
							eType = TemplateParameterSubstitution;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "boundElement";
							eType = TemplateableElement;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the TemplateSignature class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TemplateSignature" "TemplateSignature definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TemplateSignature" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TemplateSignatureDefinition 
				uml {
					eClassifiers += new EClass TemplateSignature {
						eStructuralFeatures += new EReference {
							name = "parameter";
							eType = TemplateParameter;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedParameter";
							eType = TemplateParameter;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "template";
							eType = TemplateableElement;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the TemplateParameter class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TemplateParameter" "TemplateParameter definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TemplateParameter" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TemplateParameterDefinition 
				uml {
					eClassifiers += new EClass TemplateParameter {
						eStructuralFeatures += new EReference {
							name = "signature";
							eType = TemplateSignature;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "parameteredElement";
							eType = ParameterableElement;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedParameteredElement";
							eType = ParameterableElement;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "default";
							eType = ParameterableElement;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedDefault";
							eType = ParameterableElement;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the ParameterableElement class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ParameterableElement" "ParameterableElement definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ParameterableElement" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ParameterableElementDefinition 
				uml {
					eClassifiers += new EClass ParameterableElement {
						eStructuralFeatures += new EReference {
							name = "owningTemplateParameter";
							eType = TemplateParameter;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "templateParameter";
							eType = TemplateParameter;
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the TemplateParameterSubstitution class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TemplateParameterSubstitution" "TemplateParameterSubstitution definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TemplateParameterSubstitution" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TemplateParameterSubstitutionDefinition 
				uml {
					eClassifiers += new EClass TemplateParameterSubstitution {
						eStructuralFeatures += new EReference {
							name = "formal";
							eType = TemplateParameter;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "actual";
							eType = ParameterableElement;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedActual";
							eType = ParameterableElement;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "templateBinding";
							eType = TemplateBinding;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the Generalization class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Generalization" "Generalization definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Generalization" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M GeneralizationDefinition 
				uml {
					eClassifiers += new EClass Generalization {
						eStructuralFeatures += new EAttribute {
							name = "isSubstitutable";
							eType = Boolean;
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eStructuralFeatures += new EReference {
							name = "general";
							eType = Classifier;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "generalizationSet";
							eType = GeneralizationSet;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "specific";
							eType = Classifier;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the GeneralizationSet class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "GeneralizationSet" "GeneralizationSet definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "GeneralizationSet" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M GeneralizationSetDefinition 
				uml {
					eClassifiers += new EClass GeneralizationSet {
						eStructuralFeatures += new EAttribute {
							name = "isCovering";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isDisjoint";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "powertype";
							eType = Classifier;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "generalization";
							eType = Generalization;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += PackageableElement;
					};
				}
			M@
		}

		Section Presentation of the Feature class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Feature" "Feature definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Feature" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M FeatureDefinition 
				uml {
					eClassifiers += new EClass Feature {
						eStructuralFeatures += new EAttribute {
							name = "isStatic";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "featuringClassifier";
							eType = Classifier;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += RedefinableElement;
					};
				}
			M@
		}

		Section Presentation of the Substitution class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Substitution" "Substitution definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Substitution" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SubstitutionDefinition 
				uml {
					eClassifiers += new EClass Substitution {
						eStructuralFeatures += new EReference {
							name = "contract";
							eType = Classifier;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "substitutingClassifier";
							eType = Classifier;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Realization;
					};
				}
			M@
		}

		Section Presentation of the Realization class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Realization" "Realization definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Realization" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M RealizationDefinition 
				uml {
					eClassifiers += new EClass Realization {};
				}
			M@
		}

		Section Presentation of the Abstraction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Abstraction" "Abstraction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Abstraction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M AbstractionDefinition 
				uml {
					eClassifiers += new EClass Abstraction {
						eStructuralFeatures += new EReference {
							name = "mapping";
							eType = OpaqueExpression;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += Dependency;
					};
				}
			M@
		}

		Section Presentation of the OpaqueExpression class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "OpaqueExpression" "OpaqueExpression definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "OpaqueExpression" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M OpaqueExpressionDefinition 
				uml {
					eClassifiers += new EClass OpaqueExpression {
						eStructuralFeatures += new EAttribute {
							name = "body";
							eType = String;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "language";
							eType = String;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = Parameter;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "behavior";
							eType = Behavior;
							changeable = "true";
						};
						eSuperTypes += ValueSpecification;
					};
				}
			M@
		}

		Section Presentation of the Parameter class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Parameter" "Parameter definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Parameter" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ParameterDefinition 
				uml {
					eClassifiers += new EClass Parameter {
						eStructuralFeatures += new EReference {
							name = "parameterSet";
							eType = ParameterSet;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "operation";
							eType = Operation;
							changeable = "false";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "direction";
							eType = ParameterDirectionKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "in";
						};
						eStructuralFeatures += new EAttribute {
							name = "default";
							eType = String;
							changeable = "true";
							derived = "true";
							transient = "true";
							unsettable = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "defaultValue";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isException";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isStream";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "effect";
							eType = ParameterEffectKind;
							changeable = "true";
							unsettable = "true";
						};
						eSuperTypes += ConnectableElement;
						eSuperTypes += MultiplicityElement;
					};
				}
			M@
		}

		Section Presentation of the MultiplicityElement class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "MultiplicityElement" "MultiplicityElement definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "MultiplicityElement" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M MultiplicityElementDefinition 
				uml {
					eClassifiers += new EClass MultiplicityElement {
						eStructuralFeatures += new EAttribute {
							name = "isOrdered";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isUnique";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "upper";
							eType = UnlimitedNatural;
							changeable = "true";
							defaultValueLiteral = "1";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "lower";
							eType = Integer;
							changeable = "true";
							defaultValueLiteral = "1";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "upperValue";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "lowerValue";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the ConnectableElement class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ConnectableElement" "ConnectableElement definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ConnectableElement" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ConnectableElementDefinition 
				uml {
					eClassifiers += new EClass ConnectableElement {
						eStructuralFeatures += new EReference {
							name = "end";
							eType = ConnectorEnd;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							ordered = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += TypedElement;
						eSuperTypes += ParameterableElement;
					};
				}
			M@
		}

		Section Presentation of the ConnectorEnd class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ConnectorEnd" "ConnectorEnd definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ConnectorEnd" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ConnectorEndDefinition 
				uml {
					eClassifiers += new EClass ConnectorEnd {
						eStructuralFeatures += new EReference {
							name = "definingEnd";
							eType = Property;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "role";
							eType = ConnectableElement;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "partWithPort";
							eType = Property;
							changeable = "true";
						};
						eSuperTypes += MultiplicityElement;
					};
				}
			M@
		}

		Section Presentation of the Property class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Property" "Property definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Property" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PropertyDefinition 
				uml {
					eClassifiers += new EClass Property {
						eStructuralFeatures += new EReference {
							name = "class";
							eType = Class;
							changeable = "false";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "datatype";
							eType = DataType;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isDerived";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isDerivedUnion";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "default";
							eType = String;
							changeable = "true";
							derived = "true";
							transient = "true";
							unsettable = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "aggregation";
							eType = AggregationKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "none";
						};
						eStructuralFeatures += new EAttribute {
							name = "isComposite";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedProperty";
							eType = Property;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "owningAssociation";
							eType = Association;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "defaultValue";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "opposite";
							eType = Property;
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "subsettedProperty";
							eType = Property;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "association";
							eType = Association;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "qualifier";
							eType = Property;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "associationEnd";
							eType = Property;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += StructuralFeature;
						eSuperTypes += ConnectableElement;
						eSuperTypes += DeploymentTarget;
					};
				}
			M@
		}

		Section Presentation of the DeploymentTarget class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DeploymentTarget" "DeploymentTarget definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DeploymentTarget" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DeploymentTargetDefinition 
				uml {
					eClassifiers += new EClass DeploymentTarget {
						eStructuralFeatures += new EReference {
							name = "deployment";
							eType = Deployment;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "deployedElement";
							eType = PackageableElement;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the Deployment class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Deployment" "Deployment definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Deployment" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DeploymentDefinition 
				uml {
					eClassifiers += new EClass Deployment {
						eStructuralFeatures += new EReference {
							name = "deployedArtifact";
							eType = DeployedArtifact;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "configuration";
							eType = DeploymentSpecification;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "location";
							eType = DeploymentTarget;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Dependency;
					};
				}
			M@
		}

		Section Presentation of the DeployedArtifact class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DeployedArtifact" "DeployedArtifact definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DeployedArtifact" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DeployedArtifactDefinition 
				uml {
					eClassifiers += new EClass DeployedArtifact {};
				}
			M@
		}

		Section Presentation of the DeploymentSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DeploymentSpecification" "DeploymentSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DeploymentSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DeploymentSpecificationDefinition 
				uml {
					eClassifiers += new EClass DeploymentSpecification {
						eStructuralFeatures += new EAttribute {
							name = "deploymentLocation";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "executionLocation";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "deployment";
							eType = Deployment;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += Artifact;
					};
				}
			M@
		}

		Section Presentation of the Artifact class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Artifact" "Artifact definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Artifact" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ArtifactDefinition 
				uml {
					eClassifiers += new EClass Artifact {
						eStructuralFeatures += new EAttribute {
							name = "fileName";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "nestedArtifact";
							eType = Artifact;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "manifestation";
							eType = Manifestation;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedOperation";
							eType = Operation;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedAttribute";
							eType = Property;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += Classifier;
						eSuperTypes += DeployedArtifact;
					};
				}
			M@
		}

		Section Presentation of the Manifestation class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Manifestation" "Manifestation definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Manifestation" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ManifestationDefinition 
				uml {
					eClassifiers += new EClass Manifestation {
						eStructuralFeatures += new EReference {
							name = "utilizedElement";
							eType = PackageableElement;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Abstraction;
					};
				}
			M@
		}

		Section Presentation of the Operation class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Operation" "Operation definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Operation" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M OperationDefinition 
				uml {
					eClassifiers += new EClass Operation {
						eStructuralFeatures += new EReference {
							name = "interface";
							eType = Interface;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "class";
							eType = Class;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isQuery";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isOrdered";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isUnique";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "lower";
							eType = Integer;
							changeable = "true";
							defaultValueLiteral = "1";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "upper";
							eType = UnlimitedNatural;
							changeable = "true";
							defaultValueLiteral = "1";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "precondition";
							eType = Constraint;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "postcondition";
							eType = Constraint;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedOperation";
							eType = Operation;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "datatype";
							eType = DataType;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "bodyCondition";
							eType = Constraint;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "type";
							eType = Type;
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += BehavioralFeature;
						eSuperTypes += ParameterableElement;
						eSuperTypes += TemplateableElement;
					};
				}
			M@
		}

		Section Presentation of the BehavioralFeature class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "BehavioralFeature" "BehavioralFeature definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "BehavioralFeature" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M BehavioralFeatureDefinition 
				uml {
					eClassifiers += new EClass BehavioralFeature {
						eStructuralFeatures += new EReference {
							name = "ownedParameter";
							eType = Parameter;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isAbstract";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "method";
							eType = Behavior;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "concurrency";
							eType = CallConcurrencyKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "sequential";
						};
						eStructuralFeatures += new EReference {
							name = "raisedException";
							eType = Type;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedParameterSet";
							eType = ParameterSet;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Namespace;
						eSuperTypes += Feature;
					};
				}
			M@
		}

		Section Presentation of the Behavior class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Behavior" "Behavior definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Behavior" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M BehaviorDefinition 
				uml {
					eClassifiers += new EClass Behavior {
						eStructuralFeatures += new EAttribute {
							name = "isReentrant";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedBehavior";
							eType = Behavior;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedParameter";
							eType = Parameter;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "context";
							eType = BehavioredClassifier;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "precondition";
							eType = Constraint;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "postcondition";
							eType = Constraint;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedParameterSet";
							eType = ParameterSet;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "specification";
							eType = BehavioralFeature;
							changeable = "true";
						};
						eSuperTypes += Class;
					};
				}
			M@
		}

		Section Presentation of the Class class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Class" "Class definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Class" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ClassDefinition 
				uml {
					eClassifiers += new EClass Class {
						eStructuralFeatures += new EReference {
							name = "nestedClassifier";
							eType = Classifier;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedOperation";
							eType = Operation;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "superClass";
							eType = Class;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isActive";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "ownedReception";
							eType = Reception;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "extension";
							eType = Extension;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += EncapsulatedClassifier;
						eSuperTypes += BehavioredClassifier;
					};
				}
			M@
		}

		Section Presentation of the BehavioredClassifier class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "BehavioredClassifier" "BehavioredClassifier definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "BehavioredClassifier" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M BehavioredClassifierDefinition 
				uml {
					eClassifiers += new EClass BehavioredClassifier {
						eStructuralFeatures += new EReference {
							name = "ownedBehavior";
							eType = Behavior;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "classifierBehavior";
							eType = Behavior;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "interfaceRealization";
							eType = InterfaceRealization;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedTrigger";
							eType = Trigger;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Classifier;
					};
				}
			M@
		}

		Section Presentation of the InterfaceRealization class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InterfaceRealization" "InterfaceRealization definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InterfaceRealization" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InterfaceRealizationDefinition 
				uml {
					eClassifiers += new EClass InterfaceRealization {
						eStructuralFeatures += new EReference {
							name = "contract";
							eType = Interface;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "implementingClassifier";
							eType = BehavioredClassifier;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Realization;
					};
				}
			M@
		}

		Section Presentation of the Interface class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Interface" "Interface definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Interface" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InterfaceDefinition 
				uml {
					eClassifiers += new EClass Interface {
						eStructuralFeatures += new EReference {
							name = "ownedAttribute";
							eType = Property;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedOperation";
							eType = Operation;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "nestedClassifier";
							eType = Classifier;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedInterface";
							eType = Interface;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedReception";
							eType = Reception;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "protocol";
							eType = ProtocolStateMachine;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += Classifier;
					};
				}
			M@
		}

		Section Presentation of the Reception class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Reception" "Reception definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Reception" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReceptionDefinition 
				uml {
					eClassifiers += new EClass Reception {
						eStructuralFeatures += new EReference {
							name = "signal";
							eType = Signal;
							changeable = "true";
						};
						eSuperTypes += BehavioralFeature;
					};
				}
			M@
		}

		Section Presentation of the Signal class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Signal" "Signal definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Signal" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SignalDefinition 
				uml {
					eClassifiers += new EClass Signal {
						eStructuralFeatures += new EReference {
							name = "ownedAttribute";
							eType = Property;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += Classifier;
					};
				}
			M@
		}

		Section Presentation of the ProtocolStateMachine class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ProtocolStateMachine" "ProtocolStateMachine definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ProtocolStateMachine" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ProtocolStateMachineDefinition 
				uml {
					eClassifiers += new EClass ProtocolStateMachine {
						eStructuralFeatures += new EReference {
							name = "conformance";
							eType = ProtocolConformance;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += StateMachine;
					};
				}
			M@
		}

		Section Presentation of the StateMachine class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StateMachine" "StateMachine definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StateMachine" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StateMachineDefinition 
				uml {
					eClassifiers += new EClass StateMachine {
						eStructuralFeatures += new EReference {
							name = "region";
							eType = Region;
							containment = "true";
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "submachineState";
							eType = State;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "connectionPoint";
							eType = Pseudostate;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "extendedStateMachine";
							eType = StateMachine;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Behavior;
					};
				}
			M@
		}

		Section Presentation of the Region class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Region" "Region definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Region" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M RegionDefinition 
				uml {
					eClassifiers += new EClass Region {
						eStructuralFeatures += new EReference {
							name = "subvertex";
							eType = Vertex;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "transition";
							eType = Transition;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "state";
							eType = State;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "extendedRegion";
							eType = Region;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "stateMachine";
							eType = StateMachine;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += Namespace;
						eSuperTypes += RedefinableElement;
					};
				}
			M@
		}

		Section Presentation of the Vertex class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Vertex" "Vertex definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Vertex" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M VertexDefinition 
				uml {
					eClassifiers += new EClass Vertex {
						eStructuralFeatures += new EReference {
							name = "outgoing";
							eType = Transition;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "incoming";
							eType = Transition;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "container";
							eType = Region;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the Transition class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Transition" "Transition definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Transition" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TransitionDefinition 
				uml {
					eClassifiers += new EClass Transition {
						eStructuralFeatures += new EAttribute {
							name = "kind";
							eType = TransitionKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "external";
						};
						eStructuralFeatures += new EReference {
							name = "container";
							eType = Region;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "source";
							eType = Vertex;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "target";
							eType = Vertex;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedTransition";
							eType = Transition;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "guard";
							eType = Constraint;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "effect";
							eType = Behavior;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "trigger";
							eType = Trigger;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Namespace;
						eSuperTypes += RedefinableElement;
					};
				}
			M@
		}

		Section Presentation of the Trigger class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Trigger" "Trigger definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Trigger" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TriggerDefinition 
				uml {
					eClassifiers += new EClass Trigger {
						eStructuralFeatures += new EReference {
							name = "event";
							eType = Event;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "port";
							eType = Port;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the Event class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Event" "Event definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Event" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M EventDefinition 
				uml {
					eClassifiers += new EClass Event {};
				}
			M@
		}

		Section Presentation of the Port class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Port" "Port definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Port" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PortDefinition 
				uml {
					eClassifiers += new EClass Port {
						eStructuralFeatures += new EAttribute {
							name = "isBehavior";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isService";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eStructuralFeatures += new EReference {
							name = "required";
							eType = Interface;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedPort";
							eType = Port;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "provided";
							eType = Interface;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "protocol";
							eType = ProtocolStateMachine;
							changeable = "true";
						};
						eSuperTypes += Property;
					};
				}
			M@
		}

		Section Presentation of the State class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "State" "State definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "State" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StateDefinition 
				uml {
					eClassifiers += new EClass State {
						eStructuralFeatures += new EAttribute {
							name = "isComposite";
							eType = Boolean;
							lowerBound = "1";
							defaultValueLiteral = "false";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isOrthogonal";
							eType = Boolean;
							lowerBound = "1";
							defaultValueLiteral = "false";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isSimple";
							eType = Boolean;
							lowerBound = "1";
							defaultValueLiteral = "true";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isSubmachineState";
							eType = Boolean;
							lowerBound = "1";
							defaultValueLiteral = "false";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "submachine";
							eType = StateMachine;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "connection";
							eType = ConnectionPointReference;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "connectionPoint";
							eType = Pseudostate;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedState";
							eType = State;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "stateInvariant";
							eType = Constraint;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "entry";
							eType = Behavior;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "exit";
							eType = Behavior;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "doActivity";
							eType = Behavior;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "deferrableTrigger";
							eType = Trigger;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "region";
							eType = Region;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Namespace;
						eSuperTypes += RedefinableElement;
						eSuperTypes += Vertex;
					};
				}
			M@
		}

		Section Presentation of the ConnectionPointReference class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ConnectionPointReference" "ConnectionPointReference definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ConnectionPointReference" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ConnectionPointReferenceDefinition 
				uml {
					eClassifiers += new EClass ConnectionPointReference {
						eStructuralFeatures += new EReference {
							name = "entry";
							eType = Pseudostate;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "exit";
							eType = Pseudostate;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "state";
							eType = State;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += Vertex;
					};
				}
			M@
		}

		Section Presentation of the Pseudostate class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Pseudostate" "Pseudostate definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Pseudostate" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PseudostateDefinition 
				uml {
					eClassifiers += new EClass Pseudostate {
						eStructuralFeatures += new EAttribute {
							name = "kind";
							eType = PseudostateKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "initial";
						};
						eStructuralFeatures += new EReference {
							name = "stateMachine";
							eType = StateMachine;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "state";
							eType = State;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += Vertex;
					};
				}
			M@
		}

		Section Presentation of the ProtocolConformance class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ProtocolConformance" "ProtocolConformance definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ProtocolConformance" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ProtocolConformanceDefinition 
				uml {
					eClassifiers += new EClass ProtocolConformance {
						eStructuralFeatures += new EReference {
							name = "generalMachine";
							eType = ProtocolStateMachine;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "specificMachine";
							eType = ProtocolStateMachine;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the EncapsulatedClassifier class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "EncapsulatedClassifier" "EncapsulatedClassifier definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "EncapsulatedClassifier" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M EncapsulatedClassifierDefinition 
				uml {
					eClassifiers += new EClass EncapsulatedClassifier {
						eStructuralFeatures += new EReference {
							name = "ownedPort";
							eType = Port;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += StructuredClassifier;
					};
				}
			M@
		}

		Section Presentation of the StructuredClassifier class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StructuredClassifier" "StructuredClassifier definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StructuredClassifier" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StructuredClassifierDefinition 
				uml {
					eClassifiers += new EClass StructuredClassifier {
						eStructuralFeatures += new EReference {
							name = "ownedAttribute";
							eType = Property;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "part";
							eType = Property;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "role";
							eType = ConnectableElement;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedConnector";
							eType = Connector;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Classifier;
					};
				}
			M@
		}

		Section Presentation of the Connector class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Connector" "Connector definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Connector" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ConnectorDefinition 
				uml {
					eClassifiers += new EClass Connector {
						eStructuralFeatures += new EReference {
							name = "type";
							eType = Association;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedConnector";
							eType = Connector;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "end";
							eType = ConnectorEnd;
							containment = "true";
							lowerBound = "2";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "kind";
							eType = ConnectorKind;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "contract";
							eType = Behavior;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Feature;
					};
				}
			M@
		}

		Section Presentation of the Extension class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Extension" "Extension definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Extension" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExtensionDefinition 
				uml {
					eClassifiers += new EClass Extension {
						eStructuralFeatures += new EAttribute {
							name = "isRequired";
							eType = Boolean;
							lowerBound = "1";
							defaultValueLiteral = "false";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "metaclass";
							eType = Class;
							lowerBound = "1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += Association;
					};
				}
			M@
		}

		Section Presentation of the ExtensionEnd class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExtensionEnd" "ExtensionEnd definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExtensionEnd" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExtensionEndDefinition 
				uml {
					eClassifiers += new EClass ExtensionEnd {};
				}
			M@
		}

		Section Presentation of the Stereotype class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Stereotype" "Stereotype definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Stereotype" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StereotypeDefinition 
				uml {
					eClassifiers += new EClass Stereotype {
						eStructuralFeatures += new EReference {
							name = "icon";
							eType = Image;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Class;
					};
				}
			M@
		}

		Section Presentation of the Image class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Image" "Image definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Image" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ImageDefinition 
				uml {
					eClassifiers += new EClass Image {
						eStructuralFeatures += new EAttribute {
							name = "content";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "location";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "format";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the Profile class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Profile" "Profile definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Profile" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ProfileDefinition 
				uml {
					eClassifiers += new EClass Profile {
						eStructuralFeatures += new EReference {
							name = "ownedStereotype";
							eType = Stereotype;
							upperBound = "-1";
							changeable = "true";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "metaclassReference";
							eType = ElementImport;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "metamodelReference";
							eType = PackageImport;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Package;
					};
				}
			M@
		}

		Section Presentation of the Model class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Model" "Model definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Model" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ModelDefinition 
				uml {
					eClassifiers += new EClass Model {
						eStructuralFeatures += new EAttribute {
							name = "viewpoint";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eSuperTypes += Package;
					};
				}
			M@
		}

		Section Presentation of the ParameterSet class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ParameterSet" "ParameterSet definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ParameterSet" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ParameterSetDefinition 
				uml {
					eClassifiers += new EClass ParameterSet {
						eStructuralFeatures += new EReference {
							name = "parameter";
							eType = Parameter;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "condition";
							eType = Constraint;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the DataType class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DataType" "DataType definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DataType" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DataTypeDefinition 
				uml {
					eClassifiers += new EClass DataType {
						eStructuralFeatures += new EReference {
							name = "ownedAttribute";
							eType = Property;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "ownedOperation";
							eType = Operation;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += Classifier;
					};
				}
			M@
		}

		Section Presentation of the OperationTemplateParameter class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "OperationTemplateParameter" "OperationTemplateParameter definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "OperationTemplateParameter" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M OperationTemplateParameterDefinition 
				uml {
					eClassifiers += new EClass OperationTemplateParameter {};
				}
			M@
		}

		Section Presentation of the StructuralFeature class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StructuralFeature" "StructuralFeature definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StructuralFeature" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StructuralFeatureDefinition 
				uml {
					eClassifiers += new EClass StructuralFeature {
						eStructuralFeatures += new EAttribute {
							name = "isReadOnly";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eSuperTypes += Feature;
						eSuperTypes += TypedElement;
						eSuperTypes += MultiplicityElement;
					};
				}
			M@
		}

		Section Presentation of the ConnectableElementTemplateParameter class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ConnectableElementTemplateParameter" "ConnectableElementTemplateParameter definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ConnectableElementTemplateParameter" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ConnectableElementTemplateParameterDefinition 
				uml {
					eClassifiers += new EClass ConnectableElementTemplateParameter {};
				}
			M@
		}

		Section Presentation of the CollaborationUse class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CollaborationUse" "CollaborationUse definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CollaborationUse" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CollaborationUseDefinition 
				uml {
					eClassifiers += new EClass CollaborationUse {
						eStructuralFeatures += new EReference {
							name = "type";
							eType = Collaboration;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "roleBinding";
							eType = Dependency;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the Collaboration class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Collaboration" "Collaboration definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Collaboration" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CollaborationDefinition 
				uml {
					eClassifiers += new EClass Collaboration {
						eStructuralFeatures += new EReference {
							name = "collaborationRole";
							eType = ConnectableElement;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += BehavioredClassifier;
						eSuperTypes += StructuredClassifier;
					};
				}
			M@
		}

		Section Presentation of the UseCase class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "UseCase" "UseCase definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "UseCase" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M UseCaseDefinition 
				uml {
					eClassifiers += new EClass UseCase {
						eStructuralFeatures += new EReference {
							name = "include";
							eType = Include;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "extend";
							eType = Extend;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "extensionPoint";
							eType = ExtensionPoint;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "subject";
							eType = Classifier;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += BehavioredClassifier;
					};
				}
			M@
		}

		Section Presentation of the Include class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Include" "Include definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Include" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M IncludeDefinition 
				uml {
					eClassifiers += new EClass Include {
						eStructuralFeatures += new EReference {
							name = "addition";
							eType = UseCase;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "includingCase";
							eType = UseCase;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the Extend class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Extend" "Extend definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Extend" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExtendDefinition 
				uml {
					eClassifiers += new EClass Extend {
						eStructuralFeatures += new EReference {
							name = "extendedCase";
							eType = UseCase;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "condition";
							eType = Constraint;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "extensionLocation";
							eType = ExtensionPoint;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "extension";
							eType = UseCase;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the ExtensionPoint class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExtensionPoint" "ExtensionPoint definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExtensionPoint" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExtensionPointDefinition 
				uml {
					eClassifiers += new EClass ExtensionPoint {
						eStructuralFeatures += new EReference {
							name = "useCase";
							eType = UseCase;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += RedefinableElement;
					};
				}
			M@
		}

		Section Presentation of the RedefinableTemplateSignature class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "RedefinableTemplateSignature" "RedefinableTemplateSignature definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "RedefinableTemplateSignature" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M RedefinableTemplateSignatureDefinition 
				uml {
					eClassifiers += new EClass RedefinableTemplateSignature {
						eStructuralFeatures += new EReference {
							name = "extendedSignature";
							eType = RedefinableTemplateSignature;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inheritedParameter";
							eType = TemplateParameter;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "classifier";
							eType = Classifier;
							lowerBound = "1";
							changeable = "false";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += RedefinableElement;
						eSuperTypes += TemplateSignature;
					};
				}
			M@
		}

		Section Presentation of the ClassifierTemplateParameter class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ClassifierTemplateParameter" "ClassifierTemplateParameter definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ClassifierTemplateParameter" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ClassifierTemplateParameterDefinition 
				uml {
					eClassifiers += new EClass ClassifierTemplateParameter {
						eStructuralFeatures += new EAttribute {
							name = "allowSubstitutable";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eStructuralFeatures += new EReference {
							name = "constrainingClassifier";
							eType = Classifier;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += TemplateParameter;
					};
				}
			M@
		}

		Section Presentation of the StringExpression class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StringExpression" "StringExpression definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StringExpression" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StringExpressionDefinition 
				uml {
					eClassifiers += new EClass StringExpression {
						eStructuralFeatures += new EReference {
							name = "subExpression";
							eType = StringExpression;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "owningExpression";
							eType = StringExpression;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += Expression;
						eSuperTypes += TemplateableElement;
					};
				}
			M@
		}

		Section Presentation of the Expression class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Expression" "Expression definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Expression" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExpressionDefinition 
				uml {
					eClassifiers += new EClass Expression {
						eStructuralFeatures += new EAttribute {
							name = "symbol";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "operand";
							eType = ValueSpecification;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += ValueSpecification;
					};
				}
			M@
		}

		Section Presentation of the Usage class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Usage" "Usage definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Usage" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M UsageDefinition 
				uml {
					eClassifiers += new EClass Usage {};
				}
			M@
		}

		Section Presentation of the PackageMerge class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "PackageMerge" "PackageMerge definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "PackageMerge" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PackageMergeDefinition 
				uml {
					eClassifiers += new EClass PackageMerge {
						eStructuralFeatures += new EReference {
							name = "mergedPackage";
							eType = Package;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "receivingPackage";
							eType = Package;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the ProfileApplication class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ProfileApplication" "ProfileApplication definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ProfileApplication" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ProfileApplicationDefinition 
				uml {
					eClassifiers += new EClass ProfileApplication {
						eStructuralFeatures += new EReference {
							name = "appliedProfile";
							eType = Profile;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isStrict";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "applyingPackage";
							eType = Package;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the Enumeration class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Enumeration" "Enumeration definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Enumeration" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M EnumerationDefinition 
				uml {
					eClassifiers += new EClass Enumeration {
						eStructuralFeatures += new EReference {
							name = "ownedLiteral";
							eType = EnumerationLiteral;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += DataType;
					};
				}
			M@
		}

		Section Presentation of the EnumerationLiteral class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "EnumerationLiteral" "EnumerationLiteral definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "EnumerationLiteral" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M EnumerationLiteralDefinition 
				uml {
					eClassifiers += new EClass EnumerationLiteral {
						eStructuralFeatures += new EReference {
							name = "enumeration";
							eType = Enumeration;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += InstanceSpecification;
					};
				}
			M@
		}

		Section Presentation of the InstanceSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InstanceSpecification" "InstanceSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InstanceSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InstanceSpecificationDefinition 
				uml {
					eClassifiers += new EClass InstanceSpecification {
						eStructuralFeatures += new EReference {
							name = "classifier";
							eType = Classifier;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "slot";
							eType = Slot;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "specification";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += DeploymentTarget;
						eSuperTypes += PackageableElement;
						eSuperTypes += DeployedArtifact;
					};
				}
			M@
		}

		Section Presentation of the Slot class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Slot" "Slot definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Slot" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SlotDefinition 
				uml {
					eClassifiers += new EClass Slot {
						eStructuralFeatures += new EReference {
							name = "definingFeature";
							eType = StructuralFeature;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "value";
							eType = ValueSpecification;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "owningInstance";
							eType = InstanceSpecification;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the PrimitiveType class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "PrimitiveType" "PrimitiveType definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "PrimitiveType" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PrimitiveTypeDefinition 
				uml {
					eClassifiers += new EClass PrimitiveType {};
				}
			M@
		}

		Section Presentation of the LiteralSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LiteralSpecification" "LiteralSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LiteralSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LiteralSpecificationDefinition 
				uml {
					eClassifiers += new EClass LiteralSpecification {};
				}
			M@
		}

		Section Presentation of the LiteralInteger class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LiteralInteger" "LiteralInteger definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LiteralInteger" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LiteralIntegerDefinition 
				uml {
					eClassifiers += new EClass LiteralInteger {
						eStructuralFeatures += new EAttribute {
							name = "value";
							eType = Integer;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "0";
						};
						eSuperTypes += LiteralSpecification;
					};
				}
			M@
		}

		Section Presentation of the LiteralString class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LiteralString" "LiteralString definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LiteralString" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LiteralStringDefinition 
				uml {
					eClassifiers += new EClass LiteralString {
						eStructuralFeatures += new EAttribute {
							name = "value";
							eType = String;
							changeable = "true";
							unsettable = "true";
						};
						eSuperTypes += LiteralSpecification;
					};
				}
			M@
		}

		Section Presentation of the LiteralBoolean class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LiteralBoolean" "LiteralBoolean definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LiteralBoolean" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LiteralBooleanDefinition 
				uml {
					eClassifiers += new EClass LiteralBoolean {
						eStructuralFeatures += new EAttribute {
							name = "value";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eSuperTypes += LiteralSpecification;
					};
				}
			M@
		}

		Section Presentation of the LiteralNull class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LiteralNull" "LiteralNull definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LiteralNull" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LiteralNullDefinition 
				uml {
					eClassifiers += new EClass LiteralNull {};
				}
			M@
		}

		Section Presentation of the InstanceValue class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InstanceValue" "InstanceValue definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InstanceValue" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InstanceValueDefinition 
				uml {
					eClassifiers += new EClass InstanceValue {
						eStructuralFeatures += new EReference {
							name = "instance";
							eType = InstanceSpecification;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += ValueSpecification;
					};
				}
			M@
		}

		Section Presentation of the LiteralUnlimitedNatural class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LiteralUnlimitedNatural" "LiteralUnlimitedNatural definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LiteralUnlimitedNatural" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LiteralUnlimitedNaturalDefinition 
				uml {
					eClassifiers += new EClass LiteralUnlimitedNatural {
						eStructuralFeatures += new EAttribute {
							name = "value";
							eType = UnlimitedNatural;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "0";
						};
						eSuperTypes += LiteralSpecification;
					};
				}
			M@
		}

		Section Presentation of the OpaqueBehavior class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "OpaqueBehavior" "OpaqueBehavior definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "OpaqueBehavior" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M OpaqueBehaviorDefinition 
				uml {
					eClassifiers += new EClass OpaqueBehavior {
						eStructuralFeatures += new EAttribute {
							name = "body";
							eType = String;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "language";
							eType = String;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
							unsettable = "true";
						};
						eSuperTypes += Behavior;
					};
				}
			M@
		}

		Section Presentation of the FunctionBehavior class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "FunctionBehavior" "FunctionBehavior definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "FunctionBehavior" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M FunctionBehaviorDefinition 
				uml {
					eClassifiers += new EClass FunctionBehavior {};
				}
			M@
		}

		Section Presentation of the OpaqueAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "OpaqueAction" "OpaqueAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "OpaqueAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M OpaqueActionDefinition 
				uml {
					eClassifiers += new EClass OpaqueAction {
						eStructuralFeatures += new EAttribute {
							name = "body";
							eType = String;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "language";
							eType = String;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
							unsettable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inputValue";
							eType = InputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "outputValue";
							eType = OutputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the Action class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Action" "Action definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Action" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActionDefinition 
				uml {
					eClassifiers += new EClass Action {
						eStructuralFeatures += new EReference {
							name = "output";
							eType = OutputPin;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							ordered = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "input";
							eType = InputPin;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							ordered = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "context";
							eType = Classifier;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "localPrecondition";
							eType = Constraint;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "localPostcondition";
							eType = Constraint;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += ExecutableNode;
					};
				}
			M@
		}

		Section Presentation of the ExecutableNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExecutableNode" "ExecutableNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExecutableNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExecutableNodeDefinition 
				uml {
					eClassifiers += new EClass ExecutableNode {
						eStructuralFeatures += new EReference {
							name = "handler";
							eType = ExceptionHandler;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += ActivityNode;
					};
				}
			M@
		}

		Section Presentation of the ActivityNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ActivityNode" "ActivityNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ActivityNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActivityNodeDefinition 
				uml {
					eClassifiers += new EClass ActivityNode {
						eStructuralFeatures += new EReference {
							name = "inStructuredNode";
							eType = StructuredActivityNode;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "activity";
							eType = Activity;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "outgoing";
							eType = ActivityEdge;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "incoming";
							eType = ActivityEdge;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inPartition";
							eType = ActivityPartition;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inInterruptibleRegion";
							eType = InterruptibleActivityRegion;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inGroup";
							eType = ActivityGroup;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedNode";
							eType = ActivityNode;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += RedefinableElement;
					};
				}
			M@
		}

		Section Presentation of the StructuredActivityNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StructuredActivityNode" "StructuredActivityNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StructuredActivityNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StructuredActivityNodeDefinition 
				uml {
					eClassifiers += new EClass StructuredActivityNode {
						eStructuralFeatures += new EReference {
							name = "variable";
							eType = Variable;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "edge";
							eType = ActivityEdge;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "mustIsolate";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "node";
							eType = ActivityNode;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Action;
						eSuperTypes += Namespace;
						eSuperTypes += ActivityGroup;
					};
				}
			M@
		}

		Section Presentation of the ActivityGroup class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ActivityGroup" "ActivityGroup definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ActivityGroup" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActivityGroupDefinition 
				uml {
					eClassifiers += new EClass ActivityGroup {
						eStructuralFeatures += new EReference {
							name = "subgroup";
							eType = ActivityGroup;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "superGroup";
							eType = ActivityGroup;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inActivity";
							eType = Activity;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "containedEdge";
							eType = ActivityEdge;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "containedNode";
							eType = ActivityNode;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the Activity class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Activity" "Activity definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Activity" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActivityDefinition 
				uml {
					eClassifiers += new EClass Activity {
						eStructuralFeatures += new EReference {
							name = "structuredNode";
							eType = StructuredActivityNode;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "variable";
							eType = Variable;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "node";
							eType = ActivityNode;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isReadOnly";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "edge";
							eType = ActivityEdge;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "partition";
							eType = ActivityPartition;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isSingleExecution";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "group";
							eType = ActivityGroup;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Behavior;
					};
				}
			M@
		}

		Section Presentation of the Variable class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Variable" "Variable definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Variable" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M VariableDefinition 
				uml {
					eClassifiers += new EClass Variable {
						eStructuralFeatures += new EReference {
							name = "scope";
							eType = StructuredActivityNode;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "activityScope";
							eType = Activity;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += ConnectableElement;
						eSuperTypes += MultiplicityElement;
					};
				}
			M@
		}

		Section Presentation of the ActivityEdge class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ActivityEdge" "ActivityEdge definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ActivityEdge" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActivityEdgeDefinition 
				uml {
					eClassifiers += new EClass ActivityEdge {
						eStructuralFeatures += new EReference {
							name = "source";
							eType = ActivityNode;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "target";
							eType = ActivityNode;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "redefinedEdge";
							eType = ActivityEdge;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inPartition";
							eType = ActivityPartition;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "guard";
							eType = ValueSpecification;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "weight";
							eType = ValueSpecification;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "interrupts";
							eType = InterruptibleActivityRegion;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inStructuredNode";
							eType = StructuredActivityNode;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inGroup";
							eType = ActivityGroup;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "activity";
							eType = Activity;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += RedefinableElement;
					};
				}
			M@
		}

		Section Presentation of the ActivityPartition class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ActivityPartition" "ActivityPartition definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ActivityPartition" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActivityPartitionDefinition 
				uml {
					eClassifiers += new EClass ActivityPartition {
						eStructuralFeatures += new EAttribute {
							name = "isDimension";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isExternal";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "node";
							eType = ActivityNode;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "subpartition";
							eType = ActivityPartition;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "superPartition";
							eType = ActivityPartition;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "represents";
							eType = Element;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "edge";
							eType = ActivityEdge;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
						eSuperTypes += ActivityGroup;
					};
				}
			M@
		}

		Section Presentation of the InterruptibleActivityRegion class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InterruptibleActivityRegion" "InterruptibleActivityRegion definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InterruptibleActivityRegion" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InterruptibleActivityRegionDefinition 
				uml {
					eClassifiers += new EClass InterruptibleActivityRegion {
						eStructuralFeatures += new EReference {
							name = "node";
							eType = ActivityNode;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "interruptingEdge";
							eType = ActivityEdge;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += ActivityGroup;
					};
				}
			M@
		}

		Section Presentation of the ExceptionHandler class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExceptionHandler" "ExceptionHandler definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExceptionHandler" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExceptionHandlerDefinition 
				uml {
					eClassifiers += new EClass ExceptionHandler {
						eStructuralFeatures += new EReference {
							name = "handlerBody";
							eType = ExecutableNode;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "exceptionInput";
							eType = ObjectNode;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "exceptionType";
							eType = Classifier;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "protectedNode";
							eType = ExecutableNode;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the ObjectNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ObjectNode" "ObjectNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ObjectNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ObjectNodeDefinition 
				uml {
					eClassifiers += new EClass ObjectNode {
						eStructuralFeatures += new EAttribute {
							name = "ordering";
							eType = ObjectNodeOrderingKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "FIFO";
						};
						eStructuralFeatures += new EAttribute {
							name = "isControlType";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "upperBound";
							eType = ValueSpecification;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inState";
							eType = State;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "selection";
							eType = Behavior;
							changeable = "true";
						};
						eSuperTypes += ActivityNode;
						eSuperTypes += TypedElement;
					};
				}
			M@
		}

		Section Presentation of the OutputPin class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "OutputPin" "OutputPin definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "OutputPin" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M OutputPinDefinition 
				uml {
					eClassifiers += new EClass OutputPin {};
				}
			M@
		}

		Section Presentation of the Pin class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Pin" "Pin definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Pin" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PinDefinition 
				uml {
					eClassifiers += new EClass Pin {
						eStructuralFeatures += new EAttribute {
							name = "isControl";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eSuperTypes += ObjectNode;
						eSuperTypes += MultiplicityElement;
					};
				}
			M@
		}

		Section Presentation of the InputPin class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InputPin" "InputPin definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InputPin" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InputPinDefinition 
				uml {
					eClassifiers += new EClass InputPin {};
				}
			M@
		}

		Section Presentation of the CallAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CallAction" "CallAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CallAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CallActionDefinition 
				uml {
					eClassifiers += new EClass CallAction {
						eStructuralFeatures += new EAttribute {
							name = "isSynchronous";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += InvocationAction;
					};
				}
			M@
		}

		Section Presentation of the InvocationAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InvocationAction" "InvocationAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InvocationAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InvocationActionDefinition 
				uml {
					eClassifiers += new EClass InvocationAction {
						eStructuralFeatures += new EReference {
							name = "argument";
							eType = InputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "onPort";
							eType = Port;
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the SendSignalAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "SendSignalAction" "SendSignalAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "SendSignalAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SendSignalActionDefinition 
				uml {
					eClassifiers += new EClass SendSignalAction {
						eStructuralFeatures += new EReference {
							name = "target";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "signal";
							eType = Signal;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += InvocationAction;
					};
				}
			M@
		}

		Section Presentation of the CallOperationAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CallOperationAction" "CallOperationAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CallOperationAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CallOperationActionDefinition 
				uml {
					eClassifiers += new EClass CallOperationAction {
						eStructuralFeatures += new EReference {
							name = "operation";
							eType = Operation;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "target";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += CallAction;
					};
				}
			M@
		}

		Section Presentation of the CallBehaviorAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CallBehaviorAction" "CallBehaviorAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CallBehaviorAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CallBehaviorActionDefinition 
				uml {
					eClassifiers += new EClass CallBehaviorAction {
						eStructuralFeatures += new EReference {
							name = "behavior";
							eType = Behavior;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += CallAction;
					};
				}
			M@
		}

		Section Presentation of the SequenceNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "SequenceNode" "SequenceNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "SequenceNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SequenceNodeDefinition 
				uml {
					eClassifiers += new EClass SequenceNode {
						eStructuralFeatures += new EReference {
							name = "executableNode";
							eType = ExecutableNode;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += StructuredActivityNode;
					};
				}
			M@
		}

		Section Presentation of the ControlNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ControlNode" "ControlNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ControlNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ControlNodeDefinition 
				uml {
					eClassifiers += new EClass ControlNode {};
				}
			M@
		}

		Section Presentation of the ControlFlow class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ControlFlow" "ControlFlow definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ControlFlow" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ControlFlowDefinition 
				uml {
					eClassifiers += new EClass ControlFlow {};
				}
			M@
		}

		Section Presentation of the InitialNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InitialNode" "InitialNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InitialNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InitialNodeDefinition 
				uml {
					eClassifiers += new EClass InitialNode {};
				}
			M@
		}

		Section Presentation of the ActivityParameterNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ActivityParameterNode" "ActivityParameterNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ActivityParameterNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActivityParameterNodeDefinition 
				uml {
					eClassifiers += new EClass ActivityParameterNode {
						eStructuralFeatures += new EReference {
							name = "parameter";
							eType = Parameter;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += ObjectNode;
					};
				}
			M@
		}

		Section Presentation of the ValuePin class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ValuePin" "ValuePin definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ValuePin" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ValuePinDefinition 
				uml {
					eClassifiers += new EClass ValuePin {
						eStructuralFeatures += new EReference {
							name = "value";
							eType = ValueSpecification;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += InputPin;
					};
				}
			M@
		}

		Section Presentation of the Message class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Message" "Message definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Message" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M MessageDefinition 
				uml {
					eClassifiers += new EClass Message {
						eStructuralFeatures += new EAttribute {
							name = "messageKind";
							eType = MessageKind;
							lowerBound = "1";
							defaultValueLiteral = "unknown";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "messageSort";
							eType = MessageSort;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "synchCall";
						};
						eStructuralFeatures += new EReference {
							name = "receiveEvent";
							eType = MessageEnd;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "sendEvent";
							eType = MessageEnd;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "connector";
							eType = Connector;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "interaction";
							eType = Interaction;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "argument";
							eType = ValueSpecification;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "signature";
							eType = NamedElement;
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the MessageEnd class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "MessageEnd" "MessageEnd definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "MessageEnd" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M MessageEndDefinition 
				uml {
					eClassifiers += new EClass MessageEnd {
						eStructuralFeatures += new EReference {
							name = "message";
							eType = Message;
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the Interaction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Interaction" "Interaction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Interaction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InteractionDefinition 
				uml {
					eClassifiers += new EClass Interaction {
						eStructuralFeatures += new EReference {
							name = "lifeline";
							eType = Lifeline;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "fragment";
							eType = InteractionFragment;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "action";
							eType = Action;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "formalGate";
							eType = Gate;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "message";
							eType = Message;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Behavior;
						eSuperTypes += InteractionFragment;
					};
				}
			M@
		}

		Section Presentation of the InteractionFragment class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InteractionFragment" "InteractionFragment definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InteractionFragment" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InteractionFragmentDefinition 
				uml {
					eClassifiers += new EClass InteractionFragment {
						eStructuralFeatures += new EReference {
							name = "covered";
							eType = Lifeline;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "generalOrdering";
							eType = GeneralOrdering;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "enclosingInteraction";
							eType = Interaction;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "enclosingOperand";
							eType = InteractionOperand;
							container = "true";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the Lifeline class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Lifeline" "Lifeline definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Lifeline" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LifelineDefinition 
				uml {
					eClassifiers += new EClass Lifeline {
						eStructuralFeatures += new EReference {
							name = "represents";
							eType = ConnectableElement;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "interaction";
							eType = Interaction;
							container = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "selector";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "decomposedAs";
							eType = PartDecomposition;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "coveredBy";
							eType = InteractionFragment;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the PartDecomposition class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "PartDecomposition" "PartDecomposition definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "PartDecomposition" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M PartDecompositionDefinition 
				uml {
					eClassifiers += new EClass PartDecomposition {};
				}
			M@
		}

		Section Presentation of the InteractionUse class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InteractionUse" "InteractionUse definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InteractionUse" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InteractionUseDefinition 
				uml {
					eClassifiers += new EClass InteractionUse {
						eStructuralFeatures += new EReference {
							name = "refersTo";
							eType = Interaction;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "actualGate";
							eType = Gate;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "argument";
							eType = Action;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += InteractionFragment;
					};
				}
			M@
		}

		Section Presentation of the Gate class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Gate" "Gate definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Gate" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M GateDefinition 
				uml {
					eClassifiers += new EClass Gate {};
				}
			M@
		}

		Section Presentation of the GeneralOrdering class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "GeneralOrdering" "GeneralOrdering definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "GeneralOrdering" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M GeneralOrderingDefinition 
				uml {
					eClassifiers += new EClass GeneralOrdering {
						eStructuralFeatures += new EReference {
							name = "before";
							eType = OccurrenceSpecification;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "after";
							eType = OccurrenceSpecification;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += NamedElement;
					};
				}
			M@
		}

		Section Presentation of the OccurrenceSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "OccurrenceSpecification" "OccurrenceSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "OccurrenceSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M OccurrenceSpecificationDefinition 
				uml {
					eClassifiers += new EClass OccurrenceSpecification {
						eStructuralFeatures += new EReference {
							name = "toBefore";
							eType = GeneralOrdering;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "event";
							eType = Event;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "toAfter";
							eType = GeneralOrdering;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += InteractionFragment;
					};
				}
			M@
		}

		Section Presentation of the InteractionOperand class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InteractionOperand" "InteractionOperand definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InteractionOperand" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InteractionOperandDefinition 
				uml {
					eClassifiers += new EClass InteractionOperand {
						eStructuralFeatures += new EReference {
							name = "guard";
							eType = InteractionConstraint;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "fragment";
							eType = InteractionFragment;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += Namespace;
						eSuperTypes += InteractionFragment;
					};
				}
			M@
		}

		Section Presentation of the InteractionConstraint class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InteractionConstraint" "InteractionConstraint definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InteractionConstraint" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InteractionConstraintDefinition 
				uml {
					eClassifiers += new EClass InteractionConstraint {
						eStructuralFeatures += new EReference {
							name = "minint";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "maxint";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += Constraint;
					};
				}
			M@
		}

		Section Presentation of the ExecutionSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExecutionSpecification" "ExecutionSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExecutionSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExecutionSpecificationDefinition 
				uml {
					eClassifiers += new EClass ExecutionSpecification {
						eStructuralFeatures += new EReference {
							name = "start";
							eType = OccurrenceSpecification;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "finish";
							eType = OccurrenceSpecification;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += InteractionFragment;
					};
				}
			M@
		}

		Section Presentation of the StateInvariant class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StateInvariant" "StateInvariant definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StateInvariant" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StateInvariantDefinition 
				uml {
					eClassifiers += new EClass StateInvariant {
						eStructuralFeatures += new EReference {
							name = "invariant";
							eType = Constraint;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += InteractionFragment;
					};
				}
			M@
		}

		Section Presentation of the ActionExecutionSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ActionExecutionSpecification" "ActionExecutionSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ActionExecutionSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActionExecutionSpecificationDefinition 
				uml {
					eClassifiers += new EClass ActionExecutionSpecification {
						eStructuralFeatures += new EReference {
							name = "action";
							eType = Action;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += ExecutionSpecification;
					};
				}
			M@
		}

		Section Presentation of the BehaviorExecutionSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "BehaviorExecutionSpecification" "BehaviorExecutionSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "BehaviorExecutionSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M BehaviorExecutionSpecificationDefinition 
				uml {
					eClassifiers += new EClass BehaviorExecutionSpecification {
						eStructuralFeatures += new EReference {
							name = "behavior";
							eType = Behavior;
							changeable = "true";
						};
						eSuperTypes += ExecutionSpecification;
					};
				}
			M@
		}

		Section Presentation of the ExecutionEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExecutionEvent" "ExecutionEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExecutionEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExecutionEventDefinition 
				uml {
					eClassifiers += new EClass ExecutionEvent {};
				}
			M@
		}

		Section Presentation of the CreationEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CreationEvent" "CreationEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CreationEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CreationEventDefinition 
				uml {
					eClassifiers += new EClass CreationEvent {};
				}
			M@
		}

		Section Presentation of the DestructionEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DestructionEvent" "DestructionEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DestructionEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DestructionEventDefinition 
				uml {
					eClassifiers += new EClass DestructionEvent {};
				}
			M@
		}

		Section Presentation of the SendOperationEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "SendOperationEvent" "SendOperationEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "SendOperationEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SendOperationEventDefinition 
				uml {
					eClassifiers += new EClass SendOperationEvent {
						eStructuralFeatures += new EReference {
							name = "operation";
							eType = Operation;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += MessageEvent;
					};
				}
			M@
		}

		Section Presentation of the MessageEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "MessageEvent" "MessageEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "MessageEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M MessageEventDefinition 
				uml {
					eClassifiers += new EClass MessageEvent {};
				}
			M@
		}

		Section Presentation of the SendSignalEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "SendSignalEvent" "SendSignalEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "SendSignalEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SendSignalEventDefinition 
				uml {
					eClassifiers += new EClass SendSignalEvent {
						eStructuralFeatures += new EReference {
							name = "signal";
							eType = Signal;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += MessageEvent;
					};
				}
			M@
		}

		Section Presentation of the MessageOccurrenceSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "MessageOccurrenceSpecification" "MessageOccurrenceSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "MessageOccurrenceSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M MessageOccurrenceSpecificationDefinition 
				uml {
					eClassifiers += new EClass MessageOccurrenceSpecification {};
				}
			M@
		}

		Section Presentation of the ExecutionOccurrenceSpecification class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExecutionOccurrenceSpecification" "ExecutionOccurrenceSpecification definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExecutionOccurrenceSpecification" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExecutionOccurrenceSpecificationDefinition 
				uml {
					eClassifiers += new EClass ExecutionOccurrenceSpecification {
						eStructuralFeatures += new EReference {
							name = "execution";
							eType = ExecutionSpecification;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += OccurrenceSpecification;
					};
				}
			M@
		}

		Section Presentation of the ReceiveOperationEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReceiveOperationEvent" "ReceiveOperationEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReceiveOperationEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReceiveOperationEventDefinition 
				uml {
					eClassifiers += new EClass ReceiveOperationEvent {
						eStructuralFeatures += new EReference {
							name = "operation";
							eType = Operation;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += MessageEvent;
					};
				}
			M@
		}

		Section Presentation of the ReceiveSignalEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReceiveSignalEvent" "ReceiveSignalEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReceiveSignalEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReceiveSignalEventDefinition 
				uml {
					eClassifiers += new EClass ReceiveSignalEvent {
						eStructuralFeatures += new EReference {
							name = "signal";
							eType = Signal;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += MessageEvent;
					};
				}
			M@
		}

		Section Presentation of the Actor class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Actor" "Actor definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Actor" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActorDefinition 
				uml {
					eClassifiers += new EClass Actor {};
				}
			M@
		}

		Section Presentation of the CallEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CallEvent" "CallEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CallEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CallEventDefinition 
				uml {
					eClassifiers += new EClass CallEvent {
						eStructuralFeatures += new EReference {
							name = "operation";
							eType = Operation;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += MessageEvent;
					};
				}
			M@
		}

		Section Presentation of the ChangeEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ChangeEvent" "ChangeEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ChangeEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ChangeEventDefinition 
				uml {
					eClassifiers += new EClass ChangeEvent {
						eStructuralFeatures += new EReference {
							name = "changeExpression";
							eType = ValueSpecification;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Event;
					};
				}
			M@
		}

		Section Presentation of the SignalEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "SignalEvent" "SignalEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "SignalEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SignalEventDefinition 
				uml {
					eClassifiers += new EClass SignalEvent {
						eStructuralFeatures += new EReference {
							name = "signal";
							eType = Signal;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += MessageEvent;
					};
				}
			M@
		}

		Section Presentation of the AnyReceiveEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "AnyReceiveEvent" "AnyReceiveEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "AnyReceiveEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M AnyReceiveEventDefinition 
				uml {
					eClassifiers += new EClass AnyReceiveEvent {};
				}
			M@
		}

		Section Presentation of the ForkNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ForkNode" "ForkNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ForkNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ForkNodeDefinition 
				uml {
					eClassifiers += new EClass ForkNode {};
				}
			M@
		}

		Section Presentation of the FlowFinalNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "FlowFinalNode" "FlowFinalNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "FlowFinalNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M FlowFinalNodeDefinition 
				uml {
					eClassifiers += new EClass FlowFinalNode {};
				}
			M@
		}

		Section Presentation of the FinalNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "FinalNode" "FinalNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "FinalNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M FinalNodeDefinition 
				uml {
					eClassifiers += new EClass FinalNode {};
				}
			M@
		}

		Section Presentation of the CentralBufferNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CentralBufferNode" "CentralBufferNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CentralBufferNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CentralBufferNodeDefinition 
				uml {
					eClassifiers += new EClass CentralBufferNode {};
				}
			M@
		}

		Section Presentation of the MergeNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "MergeNode" "MergeNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "MergeNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M MergeNodeDefinition 
				uml {
					eClassifiers += new EClass MergeNode {};
				}
			M@
		}

		Section Presentation of the DecisionNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DecisionNode" "DecisionNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DecisionNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DecisionNodeDefinition 
				uml {
					eClassifiers += new EClass DecisionNode {
						eStructuralFeatures += new EReference {
							name = "decisionInput";
							eType = Behavior;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "decisionInputFlow";
							eType = ObjectFlow;
							changeable = "true";
						};
						eSuperTypes += ControlNode;
					};
				}
			M@
		}

		Section Presentation of the ObjectFlow class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ObjectFlow" "ObjectFlow definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ObjectFlow" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ObjectFlowDefinition 
				uml {
					eClassifiers += new EClass ObjectFlow {
						eStructuralFeatures += new EAttribute {
							name = "isMulticast";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isMultireceive";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "transformation";
							eType = Behavior;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "selection";
							eType = Behavior;
							changeable = "true";
						};
						eSuperTypes += ActivityEdge;
					};
				}
			M@
		}

		Section Presentation of the ActivityFinalNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ActivityFinalNode" "ActivityFinalNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ActivityFinalNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActivityFinalNodeDefinition 
				uml {
					eClassifiers += new EClass ActivityFinalNode {};
				}
			M@
		}

		Section Presentation of the ComponentRealization class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ComponentRealization" "ComponentRealization definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ComponentRealization" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ComponentRealizationDefinition 
				uml {
					eClassifiers += new EClass ComponentRealization {
						eStructuralFeatures += new EReference {
							name = "abstraction";
							eType = Component;
							container = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "realizingClassifier";
							eType = Classifier;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Realization;
					};
				}
			M@
		}

		Section Presentation of the Component class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Component" "Component definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Component" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ComponentDefinition 
				uml {
					eClassifiers += new EClass Component {
						eStructuralFeatures += new EAttribute {
							name = "isIndirectlyInstantiated";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eStructuralFeatures += new EReference {
							name = "required";
							eType = Interface;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "provided";
							eType = Interface;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "packagedElement";
							eType = PackageableElement;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "realization";
							eType = ComponentRealization;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Class;
					};
				}
			M@
		}

		Section Presentation of the Node class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Node" "Node definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Node" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M NodeDefinition 
				uml {
					eClassifiers += new EClass Node {
						eStructuralFeatures += new EReference {
							name = "nestedNode";
							eType = Node;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Class;
						eSuperTypes += DeploymentTarget;
					};
				}
			M@
		}

		Section Presentation of the CommunicationPath class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CommunicationPath" "CommunicationPath definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CommunicationPath" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CommunicationPathDefinition 
				uml {
					eClassifiers += new EClass CommunicationPath {};
				}
			M@
		}

		Section Presentation of the Device class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Device" "Device definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Device" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DeviceDefinition 
				uml {
					eClassifiers += new EClass Device {};
				}
			M@
		}

		Section Presentation of the ExecutionEnvironment class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExecutionEnvironment" "ExecutionEnvironment definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExecutionEnvironment" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExecutionEnvironmentDefinition 
				uml {
					eClassifiers += new EClass ExecutionEnvironment {};
				}
			M@
		}

		Section Presentation of the CombinedFragment class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CombinedFragment" "CombinedFragment definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CombinedFragment" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CombinedFragmentDefinition 
				uml {
					eClassifiers += new EClass CombinedFragment {
						eStructuralFeatures += new EAttribute {
							name = "interactionOperator";
							eType = InteractionOperatorKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "seq";
						};
						eStructuralFeatures += new EReference {
							name = "operand";
							eType = InteractionOperand;
							containment = "true";
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "cfragmentGate";
							eType = Gate;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += InteractionFragment;
					};
				}
			M@
		}

		Section Presentation of the Continuation class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Continuation" "Continuation definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Continuation" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ContinuationDefinition 
				uml {
					eClassifiers += new EClass Continuation {
						eStructuralFeatures += new EAttribute {
							name = "setting";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eSuperTypes += InteractionFragment;
					};
				}
			M@
		}

		Section Presentation of the ConsiderIgnoreFragment class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ConsiderIgnoreFragment" "ConsiderIgnoreFragment definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ConsiderIgnoreFragment" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ConsiderIgnoreFragmentDefinition 
				uml {
					eClassifiers += new EClass ConsiderIgnoreFragment {
						eStructuralFeatures += new EReference {
							name = "message";
							eType = NamedElement;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += CombinedFragment;
					};
				}
			M@
		}

		Section Presentation of the CreateObjectAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CreateObjectAction" "CreateObjectAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CreateObjectAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CreateObjectActionDefinition 
				uml {
					eClassifiers += new EClass CreateObjectAction {
						eStructuralFeatures += new EReference {
							name = "classifier";
							eType = Classifier;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the DestroyObjectAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DestroyObjectAction" "DestroyObjectAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DestroyObjectAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DestroyObjectActionDefinition 
				uml {
					eClassifiers += new EClass DestroyObjectAction {
						eStructuralFeatures += new EAttribute {
							name = "isDestroyLinks";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isDestroyOwnedObjects";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "target";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the TestIdentityAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TestIdentityAction" "TestIdentityAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TestIdentityAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TestIdentityActionDefinition 
				uml {
					eClassifiers += new EClass TestIdentityAction {
						eStructuralFeatures += new EReference {
							name = "first";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "second";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ReadSelfAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReadSelfAction" "ReadSelfAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReadSelfAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReadSelfActionDefinition 
				uml {
					eClassifiers += new EClass ReadSelfAction {
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the StructuralFeatureAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StructuralFeatureAction" "StructuralFeatureAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StructuralFeatureAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StructuralFeatureActionDefinition 
				uml {
					eClassifiers += new EClass StructuralFeatureAction {
						eStructuralFeatures += new EReference {
							name = "structuralFeature";
							eType = StructuralFeature;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ReadStructuralFeatureAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReadStructuralFeatureAction" "ReadStructuralFeatureAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReadStructuralFeatureAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReadStructuralFeatureActionDefinition 
				uml {
					eClassifiers += new EClass ReadStructuralFeatureAction {
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += StructuralFeatureAction;
					};
				}
			M@
		}

		Section Presentation of the WriteStructuralFeatureAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "WriteStructuralFeatureAction" "WriteStructuralFeatureAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "WriteStructuralFeatureAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M WriteStructuralFeatureActionDefinition 
				uml {
					eClassifiers += new EClass WriteStructuralFeatureAction {
						eStructuralFeatures += new EReference {
							name = "value";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += StructuralFeatureAction;
					};
				}
			M@
		}

		Section Presentation of the ClearStructuralFeatureAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ClearStructuralFeatureAction" "ClearStructuralFeatureAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ClearStructuralFeatureAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ClearStructuralFeatureActionDefinition 
				uml {
					eClassifiers += new EClass ClearStructuralFeatureAction {
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += StructuralFeatureAction;
					};
				}
			M@
		}

		Section Presentation of the RemoveStructuralFeatureValueAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "RemoveStructuralFeatureValueAction" "RemoveStructuralFeatureValueAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "RemoveStructuralFeatureValueAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M RemoveStructuralFeatureValueActionDefinition 
				uml {
					eClassifiers += new EClass RemoveStructuralFeatureValueAction {
						eStructuralFeatures += new EAttribute {
							name = "isRemoveDuplicates";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "removeAt";
							eType = InputPin;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += WriteStructuralFeatureAction;
					};
				}
			M@
		}

		Section Presentation of the AddStructuralFeatureValueAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "AddStructuralFeatureValueAction" "AddStructuralFeatureValueAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "AddStructuralFeatureValueAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M AddStructuralFeatureValueActionDefinition 
				uml {
					eClassifiers += new EClass AddStructuralFeatureValueAction {
						eStructuralFeatures += new EAttribute {
							name = "isReplaceAll";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "insertAt";
							eType = InputPin;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += WriteStructuralFeatureAction;
					};
				}
			M@
		}

		Section Presentation of the LinkAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LinkAction" "LinkAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LinkAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LinkActionDefinition 
				uml {
					eClassifiers += new EClass LinkAction {
						eStructuralFeatures += new EReference {
							name = "endData";
							eType = LinkEndData;
							containment = "true";
							lowerBound = "2";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "inputValue";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the LinkEndData class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LinkEndData" "LinkEndData definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LinkEndData" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LinkEndDataDefinition 
				uml {
					eClassifiers += new EClass LinkEndData {
						eStructuralFeatures += new EReference {
							name = "value";
							eType = InputPin;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "end";
							eType = Property;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "qualifier";
							eType = QualifierValue;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the QualifierValue class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "QualifierValue" "QualifierValue definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "QualifierValue" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M QualifierValueDefinition 
				uml {
					eClassifiers += new EClass QualifierValue {
						eStructuralFeatures += new EReference {
							name = "qualifier";
							eType = Property;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "value";
							eType = InputPin;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the ReadLinkAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReadLinkAction" "ReadLinkAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReadLinkAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReadLinkActionDefinition 
				uml {
					eClassifiers += new EClass ReadLinkAction {
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += LinkAction;
					};
				}
			M@
		}

		Section Presentation of the LinkEndCreationData class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LinkEndCreationData" "LinkEndCreationData definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LinkEndCreationData" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LinkEndCreationDataDefinition 
				uml {
					eClassifiers += new EClass LinkEndCreationData {
						eStructuralFeatures += new EAttribute {
							name = "isReplaceAll";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "insertAt";
							eType = InputPin;
							changeable = "true";
						};
						eSuperTypes += LinkEndData;
					};
				}
			M@
		}

		Section Presentation of the CreateLinkAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CreateLinkAction" "CreateLinkAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CreateLinkAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CreateLinkActionDefinition 
				uml {
					eClassifiers += new EClass CreateLinkAction {};
				}
			M@
		}

		Section Presentation of the WriteLinkAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "WriteLinkAction" "WriteLinkAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "WriteLinkAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M WriteLinkActionDefinition 
				uml {
					eClassifiers += new EClass WriteLinkAction {};
				}
			M@
		}

		Section Presentation of the DestroyLinkAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DestroyLinkAction" "DestroyLinkAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DestroyLinkAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DestroyLinkActionDefinition 
				uml {
					eClassifiers += new EClass DestroyLinkAction {};
				}
			M@
		}

		Section Presentation of the LinkEndDestructionData class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LinkEndDestructionData" "LinkEndDestructionData definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LinkEndDestructionData" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LinkEndDestructionDataDefinition 
				uml {
					eClassifiers += new EClass LinkEndDestructionData {
						eStructuralFeatures += new EAttribute {
							name = "isDestroyDuplicates";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "destroyAt";
							eType = InputPin;
							changeable = "true";
						};
						eSuperTypes += LinkEndData;
					};
				}
			M@
		}

		Section Presentation of the ClearAssociationAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ClearAssociationAction" "ClearAssociationAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ClearAssociationAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ClearAssociationActionDefinition 
				uml {
					eClassifiers += new EClass ClearAssociationAction {
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "association";
							eType = Association;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the BroadcastSignalAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "BroadcastSignalAction" "BroadcastSignalAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "BroadcastSignalAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M BroadcastSignalActionDefinition 
				uml {
					eClassifiers += new EClass BroadcastSignalAction {
						eStructuralFeatures += new EReference {
							name = "signal";
							eType = Signal;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += InvocationAction;
					};
				}
			M@
		}

		Section Presentation of the SendObjectAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "SendObjectAction" "SendObjectAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "SendObjectAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M SendObjectActionDefinition 
				uml {
					eClassifiers += new EClass SendObjectAction {
						eStructuralFeatures += new EReference {
							name = "target";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "request";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += InvocationAction;
					};
				}
			M@
		}

		Section Presentation of the ValueSpecificationAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ValueSpecificationAction" "ValueSpecificationAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ValueSpecificationAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ValueSpecificationActionDefinition 
				uml {
					eClassifiers += new EClass ValueSpecificationAction {
						eStructuralFeatures += new EReference {
							name = "value";
							eType = ValueSpecification;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the TimeExpression class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TimeExpression" "TimeExpression definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TimeExpression" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TimeExpressionDefinition 
				uml {
					eClassifiers += new EClass TimeExpression {
						eStructuralFeatures += new EReference {
							name = "expr";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "observation";
							eType = Observation;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += ValueSpecification;
					};
				}
			M@
		}

		Section Presentation of the Observation class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Observation" "Observation definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Observation" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ObservationDefinition 
				uml {
					eClassifiers += new EClass Observation {};
				}
			M@
		}

		Section Presentation of the Duration class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Duration" "Duration definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Duration" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DurationDefinition 
				uml {
					eClassifiers += new EClass Duration {
						eStructuralFeatures += new EReference {
							name = "expr";
							eType = ValueSpecification;
							containment = "true";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "observation";
							eType = Observation;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += ValueSpecification;
					};
				}
			M@
		}

		Section Presentation of the DurationInterval class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DurationInterval" "DurationInterval definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DurationInterval" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DurationIntervalDefinition 
				uml {
					eClassifiers += new EClass DurationInterval {};
				}
			M@
		}

		Section Presentation of the Interval class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Interval" "Interval definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Interval" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M IntervalDefinition 
				uml {
					eClassifiers += new EClass Interval {
						eStructuralFeatures += new EReference {
							name = "min";
							eType = ValueSpecification;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "max";
							eType = ValueSpecification;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += ValueSpecification;
					};
				}
			M@
		}

		Section Presentation of the TimeConstraint class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TimeConstraint" "TimeConstraint definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TimeConstraint" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TimeConstraintDefinition 
				uml {
					eClassifiers += new EClass TimeConstraint {
						eStructuralFeatures += new EAttribute {
							name = "firstEvent";
							eType = Boolean;
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eSuperTypes += IntervalConstraint;
					};
				}
			M@
		}

		Section Presentation of the IntervalConstraint class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "IntervalConstraint" "IntervalConstraint definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "IntervalConstraint" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M IntervalConstraintDefinition 
				uml {
					eClassifiers += new EClass IntervalConstraint {};
				}
			M@
		}

		Section Presentation of the TimeInterval class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TimeInterval" "TimeInterval definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TimeInterval" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TimeIntervalDefinition 
				uml {
					eClassifiers += new EClass TimeInterval {};
				}
			M@
		}

		Section Presentation of the DurationConstraint class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DurationConstraint" "DurationConstraint definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DurationConstraint" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DurationConstraintDefinition 
				uml {
					eClassifiers += new EClass DurationConstraint {
						eStructuralFeatures += new EAttribute {
							name = "firstEvent";
							eType = Boolean;
							upperBound = "2";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eSuperTypes += IntervalConstraint;
					};
				}
			M@
		}

		Section Presentation of the TimeObservation class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TimeObservation" "TimeObservation definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TimeObservation" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TimeObservationDefinition 
				uml {
					eClassifiers += new EClass TimeObservation {
						eStructuralFeatures += new EReference {
							name = "event";
							eType = NamedElement;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "firstEvent";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eSuperTypes += Observation;
					};
				}
			M@
		}

		Section Presentation of the DurationObservation class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DurationObservation" "DurationObservation definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DurationObservation" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DurationObservationDefinition 
				uml {
					eClassifiers += new EClass DurationObservation {
						eStructuralFeatures += new EReference {
							name = "event";
							eType = NamedElement;
							lowerBound = "1";
							upperBound = "2";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "firstEvent";
							eType = Boolean;
							upperBound = "2";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eSuperTypes += Observation;
					};
				}
			M@
		}

		Section Presentation of the FinalState class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "FinalState" "FinalState definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "FinalState" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M FinalStateDefinition 
				uml {
					eClassifiers += new EClass FinalState {};
				}
			M@
		}

		Section Presentation of the TimeEvent class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "TimeEvent" "TimeEvent definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "TimeEvent" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M TimeEventDefinition 
				uml {
					eClassifiers += new EClass TimeEvent {
						eStructuralFeatures += new EAttribute {
							name = "isRelative";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "when";
							eType = TimeExpression;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Event;
					};
				}
			M@
		}

		Section Presentation of the VariableAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "VariableAction" "VariableAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "VariableAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M VariableActionDefinition 
				uml {
					eClassifiers += new EClass VariableAction {
						eStructuralFeatures += new EReference {
							name = "variable";
							eType = Variable;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ReadVariableAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReadVariableAction" "ReadVariableAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReadVariableAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReadVariableActionDefinition 
				uml {
					eClassifiers += new EClass ReadVariableAction {
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += VariableAction;
					};
				}
			M@
		}

		Section Presentation of the WriteVariableAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "WriteVariableAction" "WriteVariableAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "WriteVariableAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M WriteVariableActionDefinition 
				uml {
					eClassifiers += new EClass WriteVariableAction {
						eStructuralFeatures += new EReference {
							name = "value";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += VariableAction;
					};
				}
			M@
		}

		Section Presentation of the ClearVariableAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ClearVariableAction" "ClearVariableAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ClearVariableAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ClearVariableActionDefinition 
				uml {
					eClassifiers += new EClass ClearVariableAction {};
				}
			M@
		}

		Section Presentation of the AddVariableValueAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "AddVariableValueAction" "AddVariableValueAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "AddVariableValueAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M AddVariableValueActionDefinition 
				uml {
					eClassifiers += new EClass AddVariableValueAction {
						eStructuralFeatures += new EAttribute {
							name = "isReplaceAll";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "insertAt";
							eType = InputPin;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += WriteVariableAction;
					};
				}
			M@
		}

		Section Presentation of the RemoveVariableValueAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "RemoveVariableValueAction" "RemoveVariableValueAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "RemoveVariableValueAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M RemoveVariableValueActionDefinition 
				uml {
					eClassifiers += new EClass RemoveVariableValueAction {
						eStructuralFeatures += new EAttribute {
							name = "isRemoveDuplicates";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "removeAt";
							eType = InputPin;
							containment = "true";
							changeable = "true";
						};
						eSuperTypes += WriteVariableAction;
					};
				}
			M@
		}

		Section Presentation of the RaiseExceptionAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "RaiseExceptionAction" "RaiseExceptionAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "RaiseExceptionAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M RaiseExceptionActionDefinition 
				uml {
					eClassifiers += new EClass RaiseExceptionAction {
						eStructuralFeatures += new EReference {
							name = "exception";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ActionInputPin class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ActionInputPin" "ActionInputPin definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ActionInputPin" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ActionInputPinDefinition 
				uml {
					eClassifiers += new EClass ActionInputPin {
						eStructuralFeatures += new EReference {
							name = "fromAction";
							eType = Action;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += InputPin;
					};
				}
			M@
		}

		Section Presentation of the InformationItem class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InformationItem" "InformationItem definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InformationItem" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InformationItemDefinition 
				uml {
					eClassifiers += new EClass InformationItem {
						eStructuralFeatures += new EReference {
							name = "represented";
							eType = Classifier;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Classifier;
					};
				}
			M@
		}

		Section Presentation of the InformationFlow class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "InformationFlow" "InformationFlow definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "InformationFlow" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M InformationFlowDefinition 
				uml {
					eClassifiers += new EClass InformationFlow {
						eStructuralFeatures += new EReference {
							name = "realization";
							eType = Relationship;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "conveyed";
							eType = Classifier;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "informationSource";
							eType = NamedElement;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "informationTarget";
							eType = NamedElement;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "realizingActivityEdge";
							eType = ActivityEdge;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "realizingConnector";
							eType = Connector;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "realizingMessage";
							eType = Message;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += PackageableElement;
						eSuperTypes += DirectedRelationship;
					};
				}
			M@
		}

		Section Presentation of the ReadExtentAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReadExtentAction" "ReadExtentAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReadExtentAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReadExtentActionDefinition 
				uml {
					eClassifiers += new EClass ReadExtentAction {
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "classifier";
							eType = Classifier;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ReclassifyObjectAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReclassifyObjectAction" "ReclassifyObjectAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReclassifyObjectAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReclassifyObjectActionDefinition 
				uml {
					eClassifiers += new EClass ReclassifyObjectAction {
						eStructuralFeatures += new EAttribute {
							name = "isReplaceAll";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "oldClassifier";
							eType = Classifier;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "newClassifier";
							eType = Classifier;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ReadIsClassifiedObjectAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReadIsClassifiedObjectAction" "ReadIsClassifiedObjectAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReadIsClassifiedObjectAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReadIsClassifiedObjectActionDefinition 
				uml {
					eClassifiers += new EClass ReadIsClassifiedObjectAction {
						eStructuralFeatures += new EAttribute {
							name = "isDirect";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "classifier";
							eType = Classifier;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the StartClassifierBehaviorAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StartClassifierBehaviorAction" "StartClassifierBehaviorAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StartClassifierBehaviorAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StartClassifierBehaviorActionDefinition 
				uml {
					eClassifiers += new EClass StartClassifierBehaviorAction {
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ReadLinkObjectEndAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReadLinkObjectEndAction" "ReadLinkObjectEndAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReadLinkObjectEndAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReadLinkObjectEndActionDefinition 
				uml {
					eClassifiers += new EClass ReadLinkObjectEndAction {
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "end";
							eType = Property;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ReadLinkObjectEndQualifierAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReadLinkObjectEndQualifierAction" "ReadLinkObjectEndQualifierAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReadLinkObjectEndQualifierAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReadLinkObjectEndQualifierActionDefinition 
				uml {
					eClassifiers += new EClass ReadLinkObjectEndQualifierAction {
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "qualifier";
							eType = Property;
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the CreateLinkObjectAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "CreateLinkObjectAction" "CreateLinkObjectAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "CreateLinkObjectAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M CreateLinkObjectActionDefinition 
				uml {
					eClassifiers += new EClass CreateLinkObjectAction {
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += CreateLinkAction;
					};
				}
			M@
		}

		Section Presentation of the AcceptEventAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "AcceptEventAction" "AcceptEventAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "AcceptEventAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M AcceptEventActionDefinition 
				uml {
					eClassifiers += new EClass AcceptEventAction {
						eStructuralFeatures += new EAttribute {
							name = "isUnmarshall";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "trigger";
							eType = Trigger;
							containment = "true";
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the AcceptCallAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "AcceptCallAction" "AcceptCallAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "AcceptCallAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M AcceptCallActionDefinition 
				uml {
					eClassifiers += new EClass AcceptCallAction {
						eStructuralFeatures += new EReference {
							name = "returnInformation";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += AcceptEventAction;
					};
				}
			M@
		}

		Section Presentation of the ReplyAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReplyAction" "ReplyAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReplyAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReplyActionDefinition 
				uml {
					eClassifiers += new EClass ReplyAction {
						eStructuralFeatures += new EReference {
							name = "replyToCall";
							eType = Trigger;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "returnInformation";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "replyValue";
							eType = InputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the UnmarshallAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "UnmarshallAction" "UnmarshallAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "UnmarshallAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M UnmarshallActionDefinition 
				uml {
					eClassifiers += new EClass UnmarshallAction {
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "unmarshallType";
							eType = Classifier;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the ReduceAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ReduceAction" "ReduceAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ReduceAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ReduceActionDefinition 
				uml {
					eClassifiers += new EClass ReduceAction {
						eStructuralFeatures += new EReference {
							name = "reducer";
							eType = Behavior;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "collection";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EAttribute {
							name = "isOrdered";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eSuperTypes += Action;
					};
				}
			M@
		}

		Section Presentation of the StartObjectBehaviorAction class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "StartObjectBehaviorAction" "StartObjectBehaviorAction definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "StartObjectBehaviorAction" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M StartObjectBehaviorActionDefinition 
				uml {
					eClassifiers += new EClass StartObjectBehaviorAction {
						eStructuralFeatures += new EReference {
							name = "object";
							eType = InputPin;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += CallAction;
					};
				}
			M@
		}

		Section Presentation of the JoinNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "JoinNode" "JoinNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "JoinNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M JoinNodeDefinition 
				uml {
					eClassifiers += new EClass JoinNode {
						eStructuralFeatures += new EAttribute {
							name = "isCombineDuplicate";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "true";
						};
						eStructuralFeatures += new EReference {
							name = "joinSpec";
							eType = ValueSpecification;
							containment = "true";
							lowerBound = "1";
							changeable = "true";
						};
						eSuperTypes += ControlNode;
					};
				}
			M@
		}

		Section Presentation of the DataStoreNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "DataStoreNode" "DataStoreNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "DataStoreNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M DataStoreNodeDefinition 
				uml {
					eClassifiers += new EClass DataStoreNode {};
				}
			M@
		}

		Section Presentation of the ConditionalNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ConditionalNode" "ConditionalNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ConditionalNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ConditionalNodeDefinition 
				uml {
					eClassifiers += new EClass ConditionalNode {
						eStructuralFeatures += new EAttribute {
							name = "isDeterminate";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EAttribute {
							name = "isAssured";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "clause";
							eType = Clause;
							containment = "true";
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += StructuredActivityNode;
					};
				}
			M@
		}

		Section Presentation of the Clause class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "Clause" "Clause definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "Clause" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ClauseDefinition 
				uml {
					eClassifiers += new EClass Clause {
						eStructuralFeatures += new EReference {
							name = "test";
							eType = ExecutableNode;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "body";
							eType = ExecutableNode;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "predecessorClause";
							eType = Clause;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "successorClause";
							eType = Clause;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "decider";
							eType = OutputPin;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "bodyOutput";
							eType = OutputPin;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += Element;
					};
				}
			M@
		}

		Section Presentation of the LoopNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "LoopNode" "LoopNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "LoopNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M LoopNodeDefinition 
				uml {
					eClassifiers += new EClass LoopNode {
						eStructuralFeatures += new EAttribute {
							name = "isTestedFirst";
							eType = Boolean;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "false";
						};
						eStructuralFeatures += new EReference {
							name = "bodyPart";
							eType = ExecutableNode;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "setupPart";
							eType = ExecutableNode;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "decider";
							eType = OutputPin;
							lowerBound = "1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "test";
							eType = ExecutableNode;
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "result";
							eType = OutputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "loopVariable";
							eType = OutputPin;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "bodyOutput";
							eType = OutputPin;
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eStructuralFeatures += new EReference {
							name = "loopVariableInput";
							eType = InputPin;
							containment = "true";
							upperBound = "-1";
							changeable = "true";
							ordered = "true";
						};
						eSuperTypes += StructuredActivityNode;
					};
				}
			M@
		}

		Section Presentation of the ExpansionNode class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExpansionNode" "ExpansionNode definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExpansionNode" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExpansionNodeDefinition 
				uml {
					eClassifiers += new EClass ExpansionNode {
						eStructuralFeatures += new EReference {
							name = "regionAsOutput";
							eType = ExpansionRegion;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "regionAsInput";
							eType = ExpansionRegion;
							changeable = "true";
						};
						eSuperTypes += ObjectNode;
					};
				}
			M@
		}

		Section Presentation of the ExpansionRegion class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ExpansionRegion" "ExpansionRegion definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ExpansionRegion" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ExpansionRegionDefinition 
				uml {
					eClassifiers += new EClass ExpansionRegion {
						eStructuralFeatures += new EAttribute {
							name = "mode";
							eType = ExpansionKind;
							lowerBound = "1";
							changeable = "true";
							defaultValueLiteral = "iterative";
						};
						eStructuralFeatures += new EReference {
							name = "inputElement";
							eType = ExpansionNode;
							lowerBound = "1";
							upperBound = "-1";
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "outputElement";
							eType = ExpansionNode;
							upperBound = "-1";
							changeable = "true";
						};
						eSuperTypes += StructuredActivityNode;
					};
				}
			M@
		}

		Section Presentation of the ProtocolTransition class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "ProtocolTransition" "ProtocolTransition definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "ProtocolTransition" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M ProtocolTransitionDefinition 
				uml {
					eClassifiers += new EClass ProtocolTransition {
						eStructuralFeatures += new EReference {
							name = "postCondition";
							eType = Constraint;
							changeable = "true";
						};
						eStructuralFeatures += new EReference {
							name = "referred";
							eType = Operation;
							upperBound = "-1";
							changeable = "false";
							derived = "true";
							transient = "true";
							volatile = "true";
						};
						eStructuralFeatures += new EReference {
							name = "preCondition";
							eType = Constraint;
							changeable = "true";
						};
						eSuperTypes += Transition;
					};
				}
			M@
		}

		Section Presentation of the AssociationClass class. {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit, 
			sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
			Ut enim ad *minim* veniam, quis nostrud exercitation ullamco laboris
			@label "AssociationClass" "AssociationClass definition"
			nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
			reprehenderit in voluptate _@velit@_ esse cillum dolore eu fugiat
			@see "AssociationClass" nulla pariatur. Excepteur sint occaecat cupidatat non proident,
			sunt in culpa qui officia deserunt mollit anim id est laborum.
			@M AssociationClassDefinition 
				uml {
					eClassifiers += new EClass AssociationClass {};
				}
			M@
		}

		Section The VisibilityKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M VisibilityKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum VisibilityKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "public";
							literal = "public";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "private";
							literal = "private";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "protected";
							literal = "protected";
							value = "2";
						};
						eLiterals += new EEnumLiteral {
							name = "package";
							literal = "package";
							value = "3";
						};
					};
				}
			M@
		}

		Section The TransitionKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M TransitionKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum TransitionKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "internal";
							literal = "internal";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "local";
							literal = "local";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "external";
							literal = "external";
							value = "2";
						};
					};
				}
			M@
		}

		Section The PseudostateKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M PseudostateKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum PseudostateKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "initial";
							literal = "initial";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "deepHistory";
							literal = "deepHistory";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "shallowHistory";
							literal = "shallowHistory";
							value = "2";
						};
						eLiterals += new EEnumLiteral {
							name = "join";
							literal = "join";
							value = "3";
						};
						eLiterals += new EEnumLiteral {
							name = "fork";
							literal = "fork";
							value = "4";
						};
						eLiterals += new EEnumLiteral {
							name = "junction";
							literal = "junction";
							value = "5";
						};
						eLiterals += new EEnumLiteral {
							name = "choice";
							literal = "choice";
							value = "6";
						};
						eLiterals += new EEnumLiteral {
							name = "entryPoint";
							literal = "entryPoint";
							value = "7";
						};
						eLiterals += new EEnumLiteral {
							name = "exitPoint";
							literal = "exitPoint";
							value = "8";
						};
						eLiterals += new EEnumLiteral {
							name = "terminate";
							literal = "terminate";
							value = "9";
						};
					};
				}
			M@
		}

		Section The ConnectorKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M ConnectorKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum ConnectorKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "assembly";
							literal = "assembly";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "delegation";
							literal = "delegation";
							value = "1";
						};
					};
				}
			M@
		}

		Section The CallConcurrencyKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M CallConcurrencyKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum CallConcurrencyKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "sequential";
							literal = "sequential";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "guarded";
							literal = "guarded";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "concurrent";
							literal = "concurrent";
							value = "2";
						};
					};
				}
			M@
		}

		Section The AggregationKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M AggregationKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum AggregationKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "none";
							literal = "none";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "shared";
							literal = "shared";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "composite";
							literal = "composite";
							value = "2";
						};
					};
				}
			M@
		}

		Section The ParameterDirectionKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M ParameterDirectionKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum ParameterDirectionKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "in";
							literal = "in";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "inout";
							literal = "inout";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "out";
							literal = "out";
							value = "2";
						};
						eLiterals += new EEnumLiteral {
							name = "return";
							literal = "return";
							value = "3";
						};
					};
				}
			M@
		}

		Section The ParameterEffectKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M ParameterEffectKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum ParameterEffectKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "create";
							literal = "create";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "read";
							literal = "read";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "update";
							literal = "update";
							value = "2";
						};
						eLiterals += new EEnumLiteral {
							name = "delete";
							literal = "delete";
							value = "3";
						};
					};
				}
			M@
		}

		Section The ObjectNodeOrderingKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M ObjectNodeOrderingKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum ObjectNodeOrderingKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "unordered";
							literal = "unordered";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "ordered";
							literal = "ordered";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "LIFO";
							literal = "LIFO";
							value = "2";
						};
						eLiterals += new EEnumLiteral {
							name = "FIFO";
							literal = "FIFO";
							value = "3";
						};
					};
				}
			M@
		}

		Section The MessageKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M MessageKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum MessageKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "complete";
							literal = "complete";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "lost";
							literal = "lost";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "found";
							literal = "found";
							value = "2";
						};
						eLiterals += new EEnumLiteral {
							name = "unknown";
							literal = "unknown";
							value = "3";
						};
					};
				}
			M@
		}

		Section The MessageSort dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M MessageSortdataTypeDefinition 
				uml {
					eClassifiers += new EEnum MessageSort {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "synchCall";
							literal = "synchCall";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "asynchCall";
							literal = "asynchCall";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "asynchSignal";
							literal = "asynchSignal";
							value = "2";
						};
						eLiterals += new EEnumLiteral {
							name = "createMessage";
							literal = "createMessage";
							value = "3";
						};
						eLiterals += new EEnumLiteral {
							name = "deleteMessage";
							literal = "deleteMessage";
							value = "4";
						};
						eLiterals += new EEnumLiteral {
							name = "reply";
							literal = "reply";
							value = "5";
						};
					};
				}
			M@
		}

		Section The InteractionOperatorKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M InteractionOperatorKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum InteractionOperatorKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "seq";
							literal = "seq";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "alt";
							literal = "alt";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "opt";
							literal = "opt";
							value = "2";
						};
						eLiterals += new EEnumLiteral {
							name = "break";
							literal = "break";
							value = "3";
						};
						eLiterals += new EEnumLiteral {
							name = "par";
							literal = "par";
							value = "4";
						};
						eLiterals += new EEnumLiteral {
							name = "strict";
							literal = "strict";
							value = "5";
						};
						eLiterals += new EEnumLiteral {
							name = "loop";
							literal = "loop";
							value = "6";
						};
						eLiterals += new EEnumLiteral {
							name = "critical";
							literal = "critical";
							value = "7";
						};
						eLiterals += new EEnumLiteral {
							name = "neg";
							literal = "neg";
							value = "8";
						};
						eLiterals += new EEnumLiteral {
							name = "assert";
							literal = "assert";
							value = "9";
						};
						eLiterals += new EEnumLiteral {
							name = "ignore";
							literal = "ignore";
							value = "10";
						};
						eLiterals += new EEnumLiteral {
							name = "consider";
							literal = "consider";
							value = "11";
						};
					};
				}
			M@
		}

		Section The ExpansionKind dataType {
			Lorem ipsum dolor sit amet, consectetur adipisicing elit.
			@M ExpansionKinddataTypeDefinition 
				uml {
					eClassifiers += new EEnum ExpansionKind {
						serializable = "true";
						eLiterals += new EEnumLiteral {
							name = "parallel";
							literal = "parallel";
							value = "0";
						};
						eLiterals += new EEnumLiteral {
							name = "iterative";
							literal = "iterative";
							value = "1";
						};
						eLiterals += new EEnumLiteral {
							name = "stream";
							literal = "stream";
							value = "2";
						};
					};
				}
			M@
		}
	}
	Chapter Abstractness for all the uml Metamodel {
		In this chapter, we will study the abstractness of each class of the Metamodel.

		Section Abstractness for Comment {
			We decide to associate the followin abstractness to Comment.
			@M CommentAbstractness 
				Comment {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Element {
			We decide to associate the followin abstractness to Element.
			@M ElementAbstractness 
				Element {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Package {
			We decide to associate the followin abstractness to Package.
			@M PackageAbstractness 
				Package {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for PackageableElement {
			We decide to associate the followin abstractness to PackageableElement.
			@M PackageableElementAbstractness 
				PackageableElement {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for NamedElement {
			We decide to associate the followin abstractness to NamedElement.
			@M NamedElementAbstractness 
				NamedElement {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Dependency {
			We decide to associate the followin abstractness to Dependency.
			@M DependencyAbstractness 
				Dependency {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DirectedRelationship {
			We decide to associate the followin abstractness to DirectedRelationship.
			@M DirectedRelationshipAbstractness 
				DirectedRelationship {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Relationship {
			We decide to associate the followin abstractness to Relationship.
			@M RelationshipAbstractness 
				Relationship {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Namespace {
			We decide to associate the followin abstractness to Namespace.
			@M NamespaceAbstractness 
				Namespace {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ElementImport {
			We decide to associate the followin abstractness to ElementImport.
			@M ElementImportAbstractness 
				ElementImport {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for PackageImport {
			We decide to associate the followin abstractness to PackageImport.
			@M PackageImportAbstractness 
				PackageImport {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Constraint {
			We decide to associate the followin abstractness to Constraint.
			@M ConstraintAbstractness 
				Constraint {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ValueSpecification {
			We decide to associate the followin abstractness to ValueSpecification.
			@M ValueSpecificationAbstractness 
				ValueSpecification {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for TypedElement {
			We decide to associate the followin abstractness to TypedElement.
			@M TypedElementAbstractness 
				TypedElement {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Type {
			We decide to associate the followin abstractness to Type.
			@M TypeAbstractness 
				Type {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Association {
			We decide to associate the followin abstractness to Association.
			@M AssociationAbstractness 
				Association {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Classifier {
			We decide to associate the followin abstractness to Classifier.
			@M ClassifierAbstractness 
				Classifier {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for RedefinableElement {
			We decide to associate the followin abstractness to RedefinableElement.
			@M RedefinableElementAbstractness 
				RedefinableElement {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for TemplateableElement {
			We decide to associate the followin abstractness to TemplateableElement.
			@M TemplateableElementAbstractness 
				TemplateableElement {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for TemplateBinding {
			We decide to associate the followin abstractness to TemplateBinding.
			@M TemplateBindingAbstractness 
				TemplateBinding {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for TemplateSignature {
			We decide to associate the followin abstractness to TemplateSignature.
			@M TemplateSignatureAbstractness 
				TemplateSignature {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for TemplateParameter {
			We decide to associate the followin abstractness to TemplateParameter.
			@M TemplateParameterAbstractness 
				TemplateParameter {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ParameterableElement {
			We decide to associate the followin abstractness to ParameterableElement.
			@M ParameterableElementAbstractness 
				ParameterableElement {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for TemplateParameterSubstitution {
			We decide to associate the followin abstractness to TemplateParameterSubstitution.
			@M TemplateParameterSubstitutionAbstractness 
				TemplateParameterSubstitution {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Generalization {
			We decide to associate the followin abstractness to Generalization.
			@M GeneralizationAbstractness 
				Generalization {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for GeneralizationSet {
			We decide to associate the followin abstractness to GeneralizationSet.
			@M GeneralizationSetAbstractness 
				GeneralizationSet {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Feature {
			We decide to associate the followin abstractness to Feature.
			@M FeatureAbstractness 
				Feature {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Substitution {
			We decide to associate the followin abstractness to Substitution.
			@M SubstitutionAbstractness 
				Substitution {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Realization {
			We decide to associate the followin abstractness to Realization.
			@M RealizationAbstractness 
				Realization {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Abstraction {
			We decide to associate the followin abstractness to Abstraction.
			@M AbstractionAbstractness 
				Abstraction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for OpaqueExpression {
			We decide to associate the followin abstractness to OpaqueExpression.
			@M OpaqueExpressionAbstractness 
				OpaqueExpression {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Parameter {
			We decide to associate the followin abstractness to Parameter.
			@M ParameterAbstractness 
				Parameter {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for MultiplicityElement {
			We decide to associate the followin abstractness to MultiplicityElement.
			@M MultiplicityElementAbstractness 
				MultiplicityElement {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ConnectableElement {
			We decide to associate the followin abstractness to ConnectableElement.
			@M ConnectableElementAbstractness 
				ConnectableElement {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ConnectorEnd {
			We decide to associate the followin abstractness to ConnectorEnd.
			@M ConnectorEndAbstractness 
				ConnectorEnd {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Property {
			We decide to associate the followin abstractness to Property.
			@M PropertyAbstractness 
				Property {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DeploymentTarget {
			We decide to associate the followin abstractness to DeploymentTarget.
			@M DeploymentTargetAbstractness 
				DeploymentTarget {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Deployment {
			We decide to associate the followin abstractness to Deployment.
			@M DeploymentAbstractness 
				Deployment {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DeployedArtifact {
			We decide to associate the followin abstractness to DeployedArtifact.
			@M DeployedArtifactAbstractness 
				DeployedArtifact {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for DeploymentSpecification {
			We decide to associate the followin abstractness to DeploymentSpecification.
			@M DeploymentSpecificationAbstractness 
				DeploymentSpecification {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Artifact {
			We decide to associate the followin abstractness to Artifact.
			@M ArtifactAbstractness 
				Artifact {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Manifestation {
			We decide to associate the followin abstractness to Manifestation.
			@M ManifestationAbstractness 
				Manifestation {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Operation {
			We decide to associate the followin abstractness to Operation.
			@M OperationAbstractness 
				Operation {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for BehavioralFeature {
			We decide to associate the followin abstractness to BehavioralFeature.
			@M BehavioralFeatureAbstractness 
				BehavioralFeature {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Behavior {
			We decide to associate the followin abstractness to Behavior.
			@M BehaviorAbstractness 
				Behavior {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Class {
			We decide to associate the followin abstractness to Class.
			@M ClassAbstractness 
				Class {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for BehavioredClassifier {
			We decide to associate the followin abstractness to BehavioredClassifier.
			@M BehavioredClassifierAbstractness 
				BehavioredClassifier {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for InterfaceRealization {
			We decide to associate the followin abstractness to InterfaceRealization.
			@M InterfaceRealizationAbstractness 
				InterfaceRealization {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Interface {
			We decide to associate the followin abstractness to Interface.
			@M InterfaceAbstractness 
				Interface {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Reception {
			We decide to associate the followin abstractness to Reception.
			@M ReceptionAbstractness 
				Reception {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Signal {
			We decide to associate the followin abstractness to Signal.
			@M SignalAbstractness 
				Signal {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ProtocolStateMachine {
			We decide to associate the followin abstractness to ProtocolStateMachine.
			@M ProtocolStateMachineAbstractness 
				ProtocolStateMachine {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for StateMachine {
			We decide to associate the followin abstractness to StateMachine.
			@M StateMachineAbstractness 
				StateMachine {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Region {
			We decide to associate the followin abstractness to Region.
			@M RegionAbstractness 
				Region {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Vertex {
			We decide to associate the followin abstractness to Vertex.
			@M VertexAbstractness 
				Vertex {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Transition {
			We decide to associate the followin abstractness to Transition.
			@M TransitionAbstractness 
				Transition {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Trigger {
			We decide to associate the followin abstractness to Trigger.
			@M TriggerAbstractness 
				Trigger {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Event {
			We decide to associate the followin abstractness to Event.
			@M EventAbstractness 
				Event {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Port {
			We decide to associate the followin abstractness to Port.
			@M PortAbstractness 
				Port {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for State {
			We decide to associate the followin abstractness to State.
			@M StateAbstractness 
				State {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ConnectionPointReference {
			We decide to associate the followin abstractness to ConnectionPointReference.
			@M ConnectionPointReferenceAbstractness 
				ConnectionPointReference {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Pseudostate {
			We decide to associate the followin abstractness to Pseudostate.
			@M PseudostateAbstractness 
				Pseudostate {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ProtocolConformance {
			We decide to associate the followin abstractness to ProtocolConformance.
			@M ProtocolConformanceAbstractness 
				ProtocolConformance {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for EncapsulatedClassifier {
			We decide to associate the followin abstractness to EncapsulatedClassifier.
			@M EncapsulatedClassifierAbstractness 
				EncapsulatedClassifier {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for StructuredClassifier {
			We decide to associate the followin abstractness to StructuredClassifier.
			@M StructuredClassifierAbstractness 
				StructuredClassifier {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Connector {
			We decide to associate the followin abstractness to Connector.
			@M ConnectorAbstractness 
				Connector {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Extension {
			We decide to associate the followin abstractness to Extension.
			@M ExtensionAbstractness 
				Extension {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExtensionEnd {
			We decide to associate the followin abstractness to ExtensionEnd.
			@M ExtensionEndAbstractness 
				ExtensionEnd {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Stereotype {
			We decide to associate the followin abstractness to Stereotype.
			@M StereotypeAbstractness 
				Stereotype {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Image {
			We decide to associate the followin abstractness to Image.
			@M ImageAbstractness 
				Image {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Profile {
			We decide to associate the followin abstractness to Profile.
			@M ProfileAbstractness 
				Profile {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Model {
			We decide to associate the followin abstractness to Model.
			@M ModelAbstractness 
				Model {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ParameterSet {
			We decide to associate the followin abstractness to ParameterSet.
			@M ParameterSetAbstractness 
				ParameterSet {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DataType {
			We decide to associate the followin abstractness to DataType.
			@M DataTypeAbstractness 
				DataType {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for OperationTemplateParameter {
			We decide to associate the followin abstractness to OperationTemplateParameter.
			@M OperationTemplateParameterAbstractness 
				OperationTemplateParameter {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for StructuralFeature {
			We decide to associate the followin abstractness to StructuralFeature.
			@M StructuralFeatureAbstractness 
				StructuralFeature {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ConnectableElementTemplateParameter {
			We decide to associate the followin abstractness to ConnectableElementTemplateParameter.
			@M ConnectableElementTemplateParameterAbstractness 
				ConnectableElementTemplateParameter {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CollaborationUse {
			We decide to associate the followin abstractness to CollaborationUse.
			@M CollaborationUseAbstractness 
				CollaborationUse {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Collaboration {
			We decide to associate the followin abstractness to Collaboration.
			@M CollaborationAbstractness 
				Collaboration {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for UseCase {
			We decide to associate the followin abstractness to UseCase.
			@M UseCaseAbstractness 
				UseCase {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Include {
			We decide to associate the followin abstractness to Include.
			@M IncludeAbstractness 
				Include {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Extend {
			We decide to associate the followin abstractness to Extend.
			@M ExtendAbstractness 
				Extend {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExtensionPoint {
			We decide to associate the followin abstractness to ExtensionPoint.
			@M ExtensionPointAbstractness 
				ExtensionPoint {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for RedefinableTemplateSignature {
			We decide to associate the followin abstractness to RedefinableTemplateSignature.
			@M RedefinableTemplateSignatureAbstractness 
				RedefinableTemplateSignature {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ClassifierTemplateParameter {
			We decide to associate the followin abstractness to ClassifierTemplateParameter.
			@M ClassifierTemplateParameterAbstractness 
				ClassifierTemplateParameter {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for StringExpression {
			We decide to associate the followin abstractness to StringExpression.
			@M StringExpressionAbstractness 
				StringExpression {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Expression {
			We decide to associate the followin abstractness to Expression.
			@M ExpressionAbstractness 
				Expression {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Usage {
			We decide to associate the followin abstractness to Usage.
			@M UsageAbstractness 
				Usage {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for PackageMerge {
			We decide to associate the followin abstractness to PackageMerge.
			@M PackageMergeAbstractness 
				PackageMerge {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ProfileApplication {
			We decide to associate the followin abstractness to ProfileApplication.
			@M ProfileApplicationAbstractness 
				ProfileApplication {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Enumeration {
			We decide to associate the followin abstractness to Enumeration.
			@M EnumerationAbstractness 
				Enumeration {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for EnumerationLiteral {
			We decide to associate the followin abstractness to EnumerationLiteral.
			@M EnumerationLiteralAbstractness 
				EnumerationLiteral {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InstanceSpecification {
			We decide to associate the followin abstractness to InstanceSpecification.
			@M InstanceSpecificationAbstractness 
				InstanceSpecification {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Slot {
			We decide to associate the followin abstractness to Slot.
			@M SlotAbstractness 
				Slot {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for PrimitiveType {
			We decide to associate the followin abstractness to PrimitiveType.
			@M PrimitiveTypeAbstractness 
				PrimitiveType {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LiteralSpecification {
			We decide to associate the followin abstractness to LiteralSpecification.
			@M LiteralSpecificationAbstractness 
				LiteralSpecification {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for LiteralInteger {
			We decide to associate the followin abstractness to LiteralInteger.
			@M LiteralIntegerAbstractness 
				LiteralInteger {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LiteralString {
			We decide to associate the followin abstractness to LiteralString.
			@M LiteralStringAbstractness 
				LiteralString {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LiteralBoolean {
			We decide to associate the followin abstractness to LiteralBoolean.
			@M LiteralBooleanAbstractness 
				LiteralBoolean {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LiteralNull {
			We decide to associate the followin abstractness to LiteralNull.
			@M LiteralNullAbstractness 
				LiteralNull {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InstanceValue {
			We decide to associate the followin abstractness to InstanceValue.
			@M InstanceValueAbstractness 
				InstanceValue {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LiteralUnlimitedNatural {
			We decide to associate the followin abstractness to LiteralUnlimitedNatural.
			@M LiteralUnlimitedNaturalAbstractness 
				LiteralUnlimitedNatural {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for OpaqueBehavior {
			We decide to associate the followin abstractness to OpaqueBehavior.
			@M OpaqueBehaviorAbstractness 
				OpaqueBehavior {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for FunctionBehavior {
			We decide to associate the followin abstractness to FunctionBehavior.
			@M FunctionBehaviorAbstractness 
				FunctionBehavior {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for OpaqueAction {
			We decide to associate the followin abstractness to OpaqueAction.
			@M OpaqueActionAbstractness 
				OpaqueAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Action {
			We decide to associate the followin abstractness to Action.
			@M ActionAbstractness 
				Action {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ExecutableNode {
			We decide to associate the followin abstractness to ExecutableNode.
			@M ExecutableNodeAbstractness 
				ExecutableNode {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ActivityNode {
			We decide to associate the followin abstractness to ActivityNode.
			@M ActivityNodeAbstractness 
				ActivityNode {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for StructuredActivityNode {
			We decide to associate the followin abstractness to StructuredActivityNode.
			@M StructuredActivityNodeAbstractness 
				StructuredActivityNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ActivityGroup {
			We decide to associate the followin abstractness to ActivityGroup.
			@M ActivityGroupAbstractness 
				ActivityGroup {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Activity {
			We decide to associate the followin abstractness to Activity.
			@M ActivityAbstractness 
				Activity {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Variable {
			We decide to associate the followin abstractness to Variable.
			@M VariableAbstractness 
				Variable {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ActivityEdge {
			We decide to associate the followin abstractness to ActivityEdge.
			@M ActivityEdgeAbstractness 
				ActivityEdge {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ActivityPartition {
			We decide to associate the followin abstractness to ActivityPartition.
			@M ActivityPartitionAbstractness 
				ActivityPartition {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InterruptibleActivityRegion {
			We decide to associate the followin abstractness to InterruptibleActivityRegion.
			@M InterruptibleActivityRegionAbstractness 
				InterruptibleActivityRegion {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExceptionHandler {
			We decide to associate the followin abstractness to ExceptionHandler.
			@M ExceptionHandlerAbstractness 
				ExceptionHandler {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ObjectNode {
			We decide to associate the followin abstractness to ObjectNode.
			@M ObjectNodeAbstractness 
				ObjectNode {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for OutputPin {
			We decide to associate the followin abstractness to OutputPin.
			@M OutputPinAbstractness 
				OutputPin {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Pin {
			We decide to associate the followin abstractness to Pin.
			@M PinAbstractness 
				Pin {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InputPin {
			We decide to associate the followin abstractness to InputPin.
			@M InputPinAbstractness 
				InputPin {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CallAction {
			We decide to associate the followin abstractness to CallAction.
			@M CallActionAbstractness 
				CallAction {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for InvocationAction {
			We decide to associate the followin abstractness to InvocationAction.
			@M InvocationActionAbstractness 
				InvocationAction {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for SendSignalAction {
			We decide to associate the followin abstractness to SendSignalAction.
			@M SendSignalActionAbstractness 
				SendSignalAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CallOperationAction {
			We decide to associate the followin abstractness to CallOperationAction.
			@M CallOperationActionAbstractness 
				CallOperationAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CallBehaviorAction {
			We decide to associate the followin abstractness to CallBehaviorAction.
			@M CallBehaviorActionAbstractness 
				CallBehaviorAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for SequenceNode {
			We decide to associate the followin abstractness to SequenceNode.
			@M SequenceNodeAbstractness 
				SequenceNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ControlNode {
			We decide to associate the followin abstractness to ControlNode.
			@M ControlNodeAbstractness 
				ControlNode {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ControlFlow {
			We decide to associate the followin abstractness to ControlFlow.
			@M ControlFlowAbstractness 
				ControlFlow {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InitialNode {
			We decide to associate the followin abstractness to InitialNode.
			@M InitialNodeAbstractness 
				InitialNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ActivityParameterNode {
			We decide to associate the followin abstractness to ActivityParameterNode.
			@M ActivityParameterNodeAbstractness 
				ActivityParameterNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ValuePin {
			We decide to associate the followin abstractness to ValuePin.
			@M ValuePinAbstractness 
				ValuePin {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Message {
			We decide to associate the followin abstractness to Message.
			@M MessageAbstractness 
				Message {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for MessageEnd {
			We decide to associate the followin abstractness to MessageEnd.
			@M MessageEndAbstractness 
				MessageEnd {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Interaction {
			We decide to associate the followin abstractness to Interaction.
			@M InteractionAbstractness 
				Interaction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InteractionFragment {
			We decide to associate the followin abstractness to InteractionFragment.
			@M InteractionFragmentAbstractness 
				InteractionFragment {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Lifeline {
			We decide to associate the followin abstractness to Lifeline.
			@M LifelineAbstractness 
				Lifeline {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for PartDecomposition {
			We decide to associate the followin abstractness to PartDecomposition.
			@M PartDecompositionAbstractness 
				PartDecomposition {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InteractionUse {
			We decide to associate the followin abstractness to InteractionUse.
			@M InteractionUseAbstractness 
				InteractionUse {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Gate {
			We decide to associate the followin abstractness to Gate.
			@M GateAbstractness 
				Gate {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for GeneralOrdering {
			We decide to associate the followin abstractness to GeneralOrdering.
			@M GeneralOrderingAbstractness 
				GeneralOrdering {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for OccurrenceSpecification {
			We decide to associate the followin abstractness to OccurrenceSpecification.
			@M OccurrenceSpecificationAbstractness 
				OccurrenceSpecification {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InteractionOperand {
			We decide to associate the followin abstractness to InteractionOperand.
			@M InteractionOperandAbstractness 
				InteractionOperand {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InteractionConstraint {
			We decide to associate the followin abstractness to InteractionConstraint.
			@M InteractionConstraintAbstractness 
				InteractionConstraint {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExecutionSpecification {
			We decide to associate the followin abstractness to ExecutionSpecification.
			@M ExecutionSpecificationAbstractness 
				ExecutionSpecification {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for StateInvariant {
			We decide to associate the followin abstractness to StateInvariant.
			@M StateInvariantAbstractness 
				StateInvariant {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ActionExecutionSpecification {
			We decide to associate the followin abstractness to ActionExecutionSpecification.
			@M ActionExecutionSpecificationAbstractness 
				ActionExecutionSpecification {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for BehaviorExecutionSpecification {
			We decide to associate the followin abstractness to BehaviorExecutionSpecification.
			@M BehaviorExecutionSpecificationAbstractness 
				BehaviorExecutionSpecification {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExecutionEvent {
			We decide to associate the followin abstractness to ExecutionEvent.
			@M ExecutionEventAbstractness 
				ExecutionEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CreationEvent {
			We decide to associate the followin abstractness to CreationEvent.
			@M CreationEventAbstractness 
				CreationEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DestructionEvent {
			We decide to associate the followin abstractness to DestructionEvent.
			@M DestructionEventAbstractness 
				DestructionEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for SendOperationEvent {
			We decide to associate the followin abstractness to SendOperationEvent.
			@M SendOperationEventAbstractness 
				SendOperationEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for MessageEvent {
			We decide to associate the followin abstractness to MessageEvent.
			@M MessageEventAbstractness 
				MessageEvent {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for SendSignalEvent {
			We decide to associate the followin abstractness to SendSignalEvent.
			@M SendSignalEventAbstractness 
				SendSignalEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for MessageOccurrenceSpecification {
			We decide to associate the followin abstractness to MessageOccurrenceSpecification.
			@M MessageOccurrenceSpecificationAbstractness 
				MessageOccurrenceSpecification {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExecutionOccurrenceSpecification {
			We decide to associate the followin abstractness to ExecutionOccurrenceSpecification.
			@M ExecutionOccurrenceSpecificationAbstractness 
				ExecutionOccurrenceSpecification {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReceiveOperationEvent {
			We decide to associate the followin abstractness to ReceiveOperationEvent.
			@M ReceiveOperationEventAbstractness 
				ReceiveOperationEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReceiveSignalEvent {
			We decide to associate the followin abstractness to ReceiveSignalEvent.
			@M ReceiveSignalEventAbstractness 
				ReceiveSignalEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Actor {
			We decide to associate the followin abstractness to Actor.
			@M ActorAbstractness 
				Actor {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CallEvent {
			We decide to associate the followin abstractness to CallEvent.
			@M CallEventAbstractness 
				CallEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ChangeEvent {
			We decide to associate the followin abstractness to ChangeEvent.
			@M ChangeEventAbstractness 
				ChangeEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for SignalEvent {
			We decide to associate the followin abstractness to SignalEvent.
			@M SignalEventAbstractness 
				SignalEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for AnyReceiveEvent {
			We decide to associate the followin abstractness to AnyReceiveEvent.
			@M AnyReceiveEventAbstractness 
				AnyReceiveEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ForkNode {
			We decide to associate the followin abstractness to ForkNode.
			@M ForkNodeAbstractness 
				ForkNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for FlowFinalNode {
			We decide to associate the followin abstractness to FlowFinalNode.
			@M FlowFinalNodeAbstractness 
				FlowFinalNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for FinalNode {
			We decide to associate the followin abstractness to FinalNode.
			@M FinalNodeAbstractness 
				FinalNode {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for CentralBufferNode {
			We decide to associate the followin abstractness to CentralBufferNode.
			@M CentralBufferNodeAbstractness 
				CentralBufferNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for MergeNode {
			We decide to associate the followin abstractness to MergeNode.
			@M MergeNodeAbstractness 
				MergeNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DecisionNode {
			We decide to associate the followin abstractness to DecisionNode.
			@M DecisionNodeAbstractness 
				DecisionNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ObjectFlow {
			We decide to associate the followin abstractness to ObjectFlow.
			@M ObjectFlowAbstractness 
				ObjectFlow {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ActivityFinalNode {
			We decide to associate the followin abstractness to ActivityFinalNode.
			@M ActivityFinalNodeAbstractness 
				ActivityFinalNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ComponentRealization {
			We decide to associate the followin abstractness to ComponentRealization.
			@M ComponentRealizationAbstractness 
				ComponentRealization {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Component {
			We decide to associate the followin abstractness to Component.
			@M ComponentAbstractness 
				Component {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Node {
			We decide to associate the followin abstractness to Node.
			@M NodeAbstractness 
				Node {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CommunicationPath {
			We decide to associate the followin abstractness to CommunicationPath.
			@M CommunicationPathAbstractness 
				CommunicationPath {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Device {
			We decide to associate the followin abstractness to Device.
			@M DeviceAbstractness 
				Device {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExecutionEnvironment {
			We decide to associate the followin abstractness to ExecutionEnvironment.
			@M ExecutionEnvironmentAbstractness 
				ExecutionEnvironment {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CombinedFragment {
			We decide to associate the followin abstractness to CombinedFragment.
			@M CombinedFragmentAbstractness 
				CombinedFragment {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Continuation {
			We decide to associate the followin abstractness to Continuation.
			@M ContinuationAbstractness 
				Continuation {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ConsiderIgnoreFragment {
			We decide to associate the followin abstractness to ConsiderIgnoreFragment.
			@M ConsiderIgnoreFragmentAbstractness 
				ConsiderIgnoreFragment {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CreateObjectAction {
			We decide to associate the followin abstractness to CreateObjectAction.
			@M CreateObjectActionAbstractness 
				CreateObjectAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DestroyObjectAction {
			We decide to associate the followin abstractness to DestroyObjectAction.
			@M DestroyObjectActionAbstractness 
				DestroyObjectAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for TestIdentityAction {
			We decide to associate the followin abstractness to TestIdentityAction.
			@M TestIdentityActionAbstractness 
				TestIdentityAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReadSelfAction {
			We decide to associate the followin abstractness to ReadSelfAction.
			@M ReadSelfActionAbstractness 
				ReadSelfAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for StructuralFeatureAction {
			We decide to associate the followin abstractness to StructuralFeatureAction.
			@M StructuralFeatureActionAbstractness 
				StructuralFeatureAction {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ReadStructuralFeatureAction {
			We decide to associate the followin abstractness to ReadStructuralFeatureAction.
			@M ReadStructuralFeatureActionAbstractness 
				ReadStructuralFeatureAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for WriteStructuralFeatureAction {
			We decide to associate the followin abstractness to WriteStructuralFeatureAction.
			@M WriteStructuralFeatureActionAbstractness 
				WriteStructuralFeatureAction {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ClearStructuralFeatureAction {
			We decide to associate the followin abstractness to ClearStructuralFeatureAction.
			@M ClearStructuralFeatureActionAbstractness 
				ClearStructuralFeatureAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for RemoveStructuralFeatureValueAction {
			We decide to associate the followin abstractness to RemoveStructuralFeatureValueAction.
			@M RemoveStructuralFeatureValueActionAbstractness 
				RemoveStructuralFeatureValueAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for AddStructuralFeatureValueAction {
			We decide to associate the followin abstractness to AddStructuralFeatureValueAction.
			@M AddStructuralFeatureValueActionAbstractness 
				AddStructuralFeatureValueAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LinkAction {
			We decide to associate the followin abstractness to LinkAction.
			@M LinkActionAbstractness 
				LinkAction {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for LinkEndData {
			We decide to associate the followin abstractness to LinkEndData.
			@M LinkEndDataAbstractness 
				LinkEndData {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for QualifierValue {
			We decide to associate the followin abstractness to QualifierValue.
			@M QualifierValueAbstractness 
				QualifierValue {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReadLinkAction {
			We decide to associate the followin abstractness to ReadLinkAction.
			@M ReadLinkActionAbstractness 
				ReadLinkAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LinkEndCreationData {
			We decide to associate the followin abstractness to LinkEndCreationData.
			@M LinkEndCreationDataAbstractness 
				LinkEndCreationData {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CreateLinkAction {
			We decide to associate the followin abstractness to CreateLinkAction.
			@M CreateLinkActionAbstractness 
				CreateLinkAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for WriteLinkAction {
			We decide to associate the followin abstractness to WriteLinkAction.
			@M WriteLinkActionAbstractness 
				WriteLinkAction {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for DestroyLinkAction {
			We decide to associate the followin abstractness to DestroyLinkAction.
			@M DestroyLinkActionAbstractness 
				DestroyLinkAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LinkEndDestructionData {
			We decide to associate the followin abstractness to LinkEndDestructionData.
			@M LinkEndDestructionDataAbstractness 
				LinkEndDestructionData {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ClearAssociationAction {
			We decide to associate the followin abstractness to ClearAssociationAction.
			@M ClearAssociationActionAbstractness 
				ClearAssociationAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for BroadcastSignalAction {
			We decide to associate the followin abstractness to BroadcastSignalAction.
			@M BroadcastSignalActionAbstractness 
				BroadcastSignalAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for SendObjectAction {
			We decide to associate the followin abstractness to SendObjectAction.
			@M SendObjectActionAbstractness 
				SendObjectAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ValueSpecificationAction {
			We decide to associate the followin abstractness to ValueSpecificationAction.
			@M ValueSpecificationActionAbstractness 
				ValueSpecificationAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for TimeExpression {
			We decide to associate the followin abstractness to TimeExpression.
			@M TimeExpressionAbstractness 
				TimeExpression {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Observation {
			We decide to associate the followin abstractness to Observation.
			@M ObservationAbstractness 
				Observation {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for Duration {
			We decide to associate the followin abstractness to Duration.
			@M DurationAbstractness 
				Duration {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DurationInterval {
			We decide to associate the followin abstractness to DurationInterval.
			@M DurationIntervalAbstractness 
				DurationInterval {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Interval {
			We decide to associate the followin abstractness to Interval.
			@M IntervalAbstractness 
				Interval {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for TimeConstraint {
			We decide to associate the followin abstractness to TimeConstraint.
			@M TimeConstraintAbstractness 
				TimeConstraint {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for IntervalConstraint {
			We decide to associate the followin abstractness to IntervalConstraint.
			@M IntervalConstraintAbstractness 
				IntervalConstraint {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for TimeInterval {
			We decide to associate the followin abstractness to TimeInterval.
			@M TimeIntervalAbstractness 
				TimeInterval {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DurationConstraint {
			We decide to associate the followin abstractness to DurationConstraint.
			@M DurationConstraintAbstractness 
				DurationConstraint {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for TimeObservation {
			We decide to associate the followin abstractness to TimeObservation.
			@M TimeObservationAbstractness 
				TimeObservation {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DurationObservation {
			We decide to associate the followin abstractness to DurationObservation.
			@M DurationObservationAbstractness 
				DurationObservation {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for FinalState {
			We decide to associate the followin abstractness to FinalState.
			@M FinalStateAbstractness 
				FinalState {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for TimeEvent {
			We decide to associate the followin abstractness to TimeEvent.
			@M TimeEventAbstractness 
				TimeEvent {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for VariableAction {
			We decide to associate the followin abstractness to VariableAction.
			@M VariableActionAbstractness 
				VariableAction {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ReadVariableAction {
			We decide to associate the followin abstractness to ReadVariableAction.
			@M ReadVariableActionAbstractness 
				ReadVariableAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for WriteVariableAction {
			We decide to associate the followin abstractness to WriteVariableAction.
			@M WriteVariableActionAbstractness 
				WriteVariableAction {
					abstract = "true";
				}
			M@
		}

		Section Abstractness for ClearVariableAction {
			We decide to associate the followin abstractness to ClearVariableAction.
			@M ClearVariableActionAbstractness 
				ClearVariableAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for AddVariableValueAction {
			We decide to associate the followin abstractness to AddVariableValueAction.
			@M AddVariableValueActionAbstractness 
				AddVariableValueAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for RemoveVariableValueAction {
			We decide to associate the followin abstractness to RemoveVariableValueAction.
			@M RemoveVariableValueActionAbstractness 
				RemoveVariableValueAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for RaiseExceptionAction {
			We decide to associate the followin abstractness to RaiseExceptionAction.
			@M RaiseExceptionActionAbstractness 
				RaiseExceptionAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ActionInputPin {
			We decide to associate the followin abstractness to ActionInputPin.
			@M ActionInputPinAbstractness 
				ActionInputPin {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InformationItem {
			We decide to associate the followin abstractness to InformationItem.
			@M InformationItemAbstractness 
				InformationItem {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for InformationFlow {
			We decide to associate the followin abstractness to InformationFlow.
			@M InformationFlowAbstractness 
				InformationFlow {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReadExtentAction {
			We decide to associate the followin abstractness to ReadExtentAction.
			@M ReadExtentActionAbstractness 
				ReadExtentAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReclassifyObjectAction {
			We decide to associate the followin abstractness to ReclassifyObjectAction.
			@M ReclassifyObjectActionAbstractness 
				ReclassifyObjectAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReadIsClassifiedObjectAction {
			We decide to associate the followin abstractness to ReadIsClassifiedObjectAction.
			@M ReadIsClassifiedObjectActionAbstractness 
				ReadIsClassifiedObjectAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for StartClassifierBehaviorAction {
			We decide to associate the followin abstractness to StartClassifierBehaviorAction.
			@M StartClassifierBehaviorActionAbstractness 
				StartClassifierBehaviorAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReadLinkObjectEndAction {
			We decide to associate the followin abstractness to ReadLinkObjectEndAction.
			@M ReadLinkObjectEndActionAbstractness 
				ReadLinkObjectEndAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReadLinkObjectEndQualifierAction {
			We decide to associate the followin abstractness to ReadLinkObjectEndQualifierAction.
			@M ReadLinkObjectEndQualifierActionAbstractness 
				ReadLinkObjectEndQualifierAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for CreateLinkObjectAction {
			We decide to associate the followin abstractness to CreateLinkObjectAction.
			@M CreateLinkObjectActionAbstractness 
				CreateLinkObjectAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for AcceptEventAction {
			We decide to associate the followin abstractness to AcceptEventAction.
			@M AcceptEventActionAbstractness 
				AcceptEventAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for AcceptCallAction {
			We decide to associate the followin abstractness to AcceptCallAction.
			@M AcceptCallActionAbstractness 
				AcceptCallAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReplyAction {
			We decide to associate the followin abstractness to ReplyAction.
			@M ReplyActionAbstractness 
				ReplyAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for UnmarshallAction {
			We decide to associate the followin abstractness to UnmarshallAction.
			@M UnmarshallActionAbstractness 
				UnmarshallAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ReduceAction {
			We decide to associate the followin abstractness to ReduceAction.
			@M ReduceActionAbstractness 
				ReduceAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for StartObjectBehaviorAction {
			We decide to associate the followin abstractness to StartObjectBehaviorAction.
			@M StartObjectBehaviorActionAbstractness 
				StartObjectBehaviorAction {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for JoinNode {
			We decide to associate the followin abstractness to JoinNode.
			@M JoinNodeAbstractness 
				JoinNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for DataStoreNode {
			We decide to associate the followin abstractness to DataStoreNode.
			@M DataStoreNodeAbstractness 
				DataStoreNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ConditionalNode {
			We decide to associate the followin abstractness to ConditionalNode.
			@M ConditionalNodeAbstractness 
				ConditionalNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for Clause {
			We decide to associate the followin abstractness to Clause.
			@M ClauseAbstractness 
				Clause {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for LoopNode {
			We decide to associate the followin abstractness to LoopNode.
			@M LoopNodeAbstractness 
				LoopNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExpansionNode {
			We decide to associate the followin abstractness to ExpansionNode.
			@M ExpansionNodeAbstractness 
				ExpansionNode {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ExpansionRegion {
			We decide to associate the followin abstractness to ExpansionRegion.
			@M ExpansionRegionAbstractness 
				ExpansionRegion {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for ProtocolTransition {
			We decide to associate the followin abstractness to ProtocolTransition.
			@M ProtocolTransitionAbstractness 
				ProtocolTransition {
					abstract = "false";
				}
			M@
		}

		Section Abstractness for AssociationClass {
			We decide to associate the followin abstractness to AssociationClass.
			@M AssociationClassAbstractness 
				AssociationClass {
					abstract = "false";
				}
			M@
		}
	}
}
